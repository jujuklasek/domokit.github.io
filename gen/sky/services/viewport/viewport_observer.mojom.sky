<!-- Copyright 2014 The Chromium Authors. All rights reserved.
     Use of this source code is governed by a BSD-style license that can be
     found in the LICENSE file. -->

<import src="/gen/mojo/public/sky/bindings.sky" as="bindings" />
<import src="/gen/mojo/public/sky/codec.sky" as="codec" />
<import src="/gen/mojo/public/sky/connection.sky" as="connection" />
<import src="/gen/mojo/public/sky/core.sky" as="core" />
<import src="/gen/mojo/public/sky/validator.sky" as="validator" />
<import src="/gen/sky/services/viewport/input_event.mojom.sky" as="input_event$" />
<script>

  function ViewportObserver_OnViewportMetricsChanged_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ViewportObserver_OnViewportMetricsChanged_Params.prototype.initDefaults_ = function() {
    this.width = 0;
    this.height = 0;
    this.device_pixel_ratio = 0;
  };
  ViewportObserver_OnViewportMetricsChanged_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ViewportObserver_OnViewportMetricsChanged_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, ViewportObserver_OnViewportMetricsChanged_Params.encodedSize, 3);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ViewportObserver_OnViewportMetricsChanged_Params.encodedSize = codec.kStructHeaderSize + 16;

  ViewportObserver_OnViewportMetricsChanged_Params.decode = function(decoder) {
    var packed;
    var val = new ViewportObserver_OnViewportMetricsChanged_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.width = decoder.decodeStruct(codec.Int32);
    val.height = decoder.decodeStruct(codec.Int32);
    val.device_pixel_ratio = decoder.decodeStruct(codec.Float);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ViewportObserver_OnViewportMetricsChanged_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ViewportObserver_OnViewportMetricsChanged_Params.encodedSize);
    encoder.writeUint32(3);
    encoder.encodeStruct(codec.Int32, val.width);
    encoder.encodeStruct(codec.Int32, val.height);
    encoder.encodeStruct(codec.Float, val.device_pixel_ratio);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function ViewportObserver_OnInputEvent_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ViewportObserver_OnInputEvent_Params.prototype.initDefaults_ = function() {
    this.event = null;
  };
  ViewportObserver_OnInputEvent_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ViewportObserver_OnInputEvent_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, ViewportObserver_OnInputEvent_Params.encodedSize, 1);
    if (err !== validator.validationError.NONE)
        return err;
    // validate ViewportObserver_OnInputEvent_Params.event
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, input_event$.InputEvent, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ViewportObserver_OnInputEvent_Params.encodedSize = codec.kStructHeaderSize + 8;

  ViewportObserver_OnInputEvent_Params.decode = function(decoder) {
    var packed;
    var val = new ViewportObserver_OnInputEvent_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.event = decoder.decodeStructPointer(input_event$.InputEvent);
    return val;
  };

  ViewportObserver_OnInputEvent_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ViewportObserver_OnInputEvent_Params.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStructPointer(input_event$.InputEvent, val.event);
  };

  function ViewportObserver_LoadURL_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ViewportObserver_LoadURL_Params.prototype.initDefaults_ = function() {
    this.url = null;
  };
  ViewportObserver_LoadURL_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ViewportObserver_LoadURL_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, ViewportObserver_LoadURL_Params.encodedSize, 1);
    if (err !== validator.validationError.NONE)
        return err;
    // validate ViewportObserver_LoadURL_Params.url
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ViewportObserver_LoadURL_Params.encodedSize = codec.kStructHeaderSize + 8;

  ViewportObserver_LoadURL_Params.decode = function(decoder) {
    var packed;
    var val = new ViewportObserver_LoadURL_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.url = decoder.decodeStruct(codec.String);
    return val;
  };

  ViewportObserver_LoadURL_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ViewportObserver_LoadURL_Params.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStruct(codec.String, val.url);
  };

  var kViewportObserver_OnViewportMetricsChanged_Name = 0;
  var kViewportObserver_OnInputEvent_Name = 1;
  var kViewportObserver_LoadURL_Name = 2;

  function ViewportObserverProxy(receiver) {
    bindings.ProxyBase.call(this, receiver);
  }
  ViewportObserverProxy.prototype = Object.create(bindings.ProxyBase.prototype);
  ViewportObserverProxy.prototype.onViewportMetricsChanged = function(width, height, device_pixel_ratio) {
    var params = new ViewportObserver_OnViewportMetricsChanged_Params();
    params.width = width;
    params.height = height;
    params.device_pixel_ratio = device_pixel_ratio;
    var builder = new codec.MessageBuilder(
        kViewportObserver_OnViewportMetricsChanged_Name,
        codec.align(ViewportObserver_OnViewportMetricsChanged_Params.encodedSize));
    builder.encodeStruct(ViewportObserver_OnViewportMetricsChanged_Params, params);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ViewportObserverProxy.prototype.onInputEvent = function(event) {
    var params = new ViewportObserver_OnInputEvent_Params();
    params.event = event;
    var builder = new codec.MessageBuilder(
        kViewportObserver_OnInputEvent_Name,
        codec.align(ViewportObserver_OnInputEvent_Params.encodedSize));
    builder.encodeStruct(ViewportObserver_OnInputEvent_Params, params);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ViewportObserverProxy.prototype.loadURL = function(url) {
    var params = new ViewportObserver_LoadURL_Params();
    params.url = url;
    var builder = new codec.MessageBuilder(
        kViewportObserver_LoadURL_Name,
        codec.align(ViewportObserver_LoadURL_Params.encodedSize));
    builder.encodeStruct(ViewportObserver_LoadURL_Params, params);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function ViewportObserverStub(delegate) {
    bindings.StubBase.call(this, delegate);
  }
  ViewportObserverStub.prototype = Object.create(bindings.StubBase.prototype);
  ViewportObserverStub.prototype.onViewportMetricsChanged = function(width, height, device_pixel_ratio) {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.onViewportMetricsChanged && bindings.StubBindings(this).delegate.onViewportMetricsChanged(width, height, device_pixel_ratio);
  }
  ViewportObserverStub.prototype.onInputEvent = function(event) {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.onInputEvent && bindings.StubBindings(this).delegate.onInputEvent(event);
  }
  ViewportObserverStub.prototype.loadURL = function(url) {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.loadURL && bindings.StubBindings(this).delegate.loadURL(url);
  }

  ViewportObserverStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kViewportObserver_OnViewportMetricsChanged_Name:
      var params = reader.decodeStruct(ViewportObserver_OnViewportMetricsChanged_Params);
      this.onViewportMetricsChanged(params.width, params.height, params.device_pixel_ratio);
      return true;
    case kViewportObserver_OnInputEvent_Name:
      var params = reader.decodeStruct(ViewportObserver_OnInputEvent_Params);
      this.onInputEvent(params.event);
      return true;
    case kViewportObserver_LoadURL_Name:
      var params = reader.decodeStruct(ViewportObserver_LoadURL_Params);
      this.loadURL(params.url);
      return true;
    default:
      return false;
    }
  };

  ViewportObserverStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return Promise.reject(Error("Unhandled message: " + reader.messageName));
    }
  };

  function validateViewportObserverRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kViewportObserver_OnViewportMetricsChanged_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ViewportObserver_OnViewportMetricsChanged_Params;
      break;
      case kViewportObserver_OnInputEvent_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ViewportObserver_OnInputEvent_Params;
      break;
      case kViewportObserver_LoadURL_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ViewportObserver_LoadURL_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateViewportObserverResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var ViewportObserver = {
    name: 'sky::ViewportObserver',
    proxyClass: ViewportObserverProxy,
    stubClass: ViewportObserverStub,
    validateRequest: validateViewportObserverRequest,
    validateResponse: null,
  };
  ViewportObserverStub.prototype.validator = validateViewportObserverRequest;
  ViewportObserverProxy.prototype.validator = null;


  var exports = {};
  exports.ViewportObserver = ViewportObserver;

  module.exports = exports;
</script>

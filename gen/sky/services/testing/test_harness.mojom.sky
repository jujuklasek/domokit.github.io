<!-- Copyright 2014 The Chromium Authors. All rights reserved.
     Use of this source code is governed by a BSD-style license that can be
     found in the LICENSE file. -->

<import src="/gen/mojo/public/sky/bindings.sky" as="bindings" />
<import src="/gen/mojo/public/sky/codec.sky" as="codec" />
<import src="/gen/mojo/public/sky/connection.sky" as="connection" />
<import src="/gen/mojo/public/sky/core.sky" as="core" />
<import src="/gen/mojo/public/sky/validator.sky" as="validator" />
<import src="/gen/mojo/services/input_events/public/interfaces/input_events.mojom.sky" as="input_events$" />
<script>

  function TestHarness_OnTestComplete_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestHarness_OnTestComplete_Params.prototype.initDefaults_ = function() {
    this.test_result = null;
    this.pixels = null;
  };
  TestHarness_OnTestComplete_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestHarness_OnTestComplete_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, TestHarness_OnTestComplete_Params.encodedSize, 2);
    if (err !== validator.validationError.NONE)
        return err;
    // validate TestHarness_OnTestComplete_Params.test_result
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;
    // validate TestHarness_OnTestComplete_Params.pixels
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 1, codec.Uint8, true, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestHarness_OnTestComplete_Params.encodedSize = codec.kStructHeaderSize + 16;

  TestHarness_OnTestComplete_Params.decode = function(decoder) {
    var packed;
    var val = new TestHarness_OnTestComplete_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.test_result = decoder.decodeStruct(codec.String);
    val.pixels = decoder.decodeArrayPointer(codec.Uint8);
    return val;
  };

  TestHarness_OnTestComplete_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestHarness_OnTestComplete_Params.encodedSize);
    encoder.writeUint32(2);
    encoder.encodeStruct(codec.String, val.test_result);
    encoder.encodeArrayPointer(codec.Uint8, val.pixels);
  };

  function TestHarness_DispatchInputEvent_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestHarness_DispatchInputEvent_Params.prototype.initDefaults_ = function() {
    this.event = null;
  };
  TestHarness_DispatchInputEvent_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestHarness_DispatchInputEvent_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, TestHarness_DispatchInputEvent_Params.encodedSize, 1);
    if (err !== validator.validationError.NONE)
        return err;
    // validate TestHarness_DispatchInputEvent_Params.event
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, input_events$.Event, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestHarness_DispatchInputEvent_Params.encodedSize = codec.kStructHeaderSize + 8;

  TestHarness_DispatchInputEvent_Params.decode = function(decoder) {
    var packed;
    var val = new TestHarness_DispatchInputEvent_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.event = decoder.decodeStructPointer(input_events$.Event);
    return val;
  };

  TestHarness_DispatchInputEvent_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestHarness_DispatchInputEvent_Params.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStructPointer(input_events$.Event, val.event);
  };

  var kTestHarness_OnTestComplete_Name = 0;
  var kTestHarness_DispatchInputEvent_Name = 1;

  function TestHarnessProxy(receiver) {
    bindings.ProxyBase.call(this, receiver);
  }
  TestHarnessProxy.prototype = Object.create(bindings.ProxyBase.prototype);
  TestHarnessProxy.prototype.onTestComplete = function(test_result, pixels) {
    var params = new TestHarness_OnTestComplete_Params();
    params.test_result = test_result;
    params.pixels = pixels;
    var builder = new codec.MessageBuilder(
        kTestHarness_OnTestComplete_Name,
        codec.align(TestHarness_OnTestComplete_Params.encodedSize));
    builder.encodeStruct(TestHarness_OnTestComplete_Params, params);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  TestHarnessProxy.prototype.dispatchInputEvent = function(event) {
    var params = new TestHarness_DispatchInputEvent_Params();
    params.event = event;
    var builder = new codec.MessageBuilder(
        kTestHarness_DispatchInputEvent_Name,
        codec.align(TestHarness_DispatchInputEvent_Params.encodedSize));
    builder.encodeStruct(TestHarness_DispatchInputEvent_Params, params);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function TestHarnessStub(delegate) {
    bindings.StubBase.call(this, delegate);
  }
  TestHarnessStub.prototype = Object.create(bindings.StubBase.prototype);
  TestHarnessStub.prototype.onTestComplete = function(test_result, pixels) {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.onTestComplete && bindings.StubBindings(this).delegate.onTestComplete(test_result, pixels);
  }
  TestHarnessStub.prototype.dispatchInputEvent = function(event) {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.dispatchInputEvent && bindings.StubBindings(this).delegate.dispatchInputEvent(event);
  }

  TestHarnessStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kTestHarness_OnTestComplete_Name:
      var params = reader.decodeStruct(TestHarness_OnTestComplete_Params);
      this.onTestComplete(params.test_result, params.pixels);
      return true;
    case kTestHarness_DispatchInputEvent_Name:
      var params = reader.decodeStruct(TestHarness_DispatchInputEvent_Params);
      this.dispatchInputEvent(params.event);
      return true;
    default:
      return false;
    }
  };

  TestHarnessStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return Promise.reject(Error("Unhandled message: " + reader.messageName));
    }
  };

  function validateTestHarnessRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kTestHarness_OnTestComplete_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = TestHarness_OnTestComplete_Params;
      break;
      case kTestHarness_DispatchInputEvent_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = TestHarness_DispatchInputEvent_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateTestHarnessResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var TestHarness = {
    name: 'sky::TestHarness',
    proxyClass: TestHarnessProxy,
    stubClass: TestHarnessStub,
    validateRequest: validateTestHarnessRequest,
    validateResponse: null,
  };
  TestHarnessStub.prototype.validator = validateTestHarnessRequest;
  TestHarnessProxy.prototype.validator = null;


  var exports = {};
  exports.TestHarness = TestHarness;

  module.exports = exports;
</script>

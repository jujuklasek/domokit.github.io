<!-- Copyright 2014 The Chromium Authors. All rights reserved.
     Use of this source code is governed by a BSD-style license that can be
     found in the LICENSE file. -->

<import src="/gen/mojo/public/sky/bindings.sky" as="bindings" />
<import src="/gen/mojo/public/sky/codec.sky" as="codec" />
<import src="/gen/mojo/public/sky/connection.sky" as="connection" />
<import src="/gen/mojo/public/sky/core.sky" as="core" />
<import src="/gen/mojo/public/sky/validator.sky" as="validator" />
<script>

  function InspectorFrontend_SendMessage_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  InspectorFrontend_SendMessage_Params.prototype.initDefaults_ = function() {
    this.message = null;
  };
  InspectorFrontend_SendMessage_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  InspectorFrontend_SendMessage_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, InspectorFrontend_SendMessage_Params.encodedSize, 1);
    if (err !== validator.validationError.NONE)
        return err;
    // validate InspectorFrontend_SendMessage_Params.message
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  InspectorFrontend_SendMessage_Params.encodedSize = codec.kStructHeaderSize + 8;

  InspectorFrontend_SendMessage_Params.decode = function(decoder) {
    var packed;
    var val = new InspectorFrontend_SendMessage_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.message = decoder.decodeStruct(codec.String);
    return val;
  };

  InspectorFrontend_SendMessage_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(InspectorFrontend_SendMessage_Params.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStruct(codec.String, val.message);
  };

  function InspectorBackend_OnConnect_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  InspectorBackend_OnConnect_Params.prototype.initDefaults_ = function() {
  };
  InspectorBackend_OnConnect_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  InspectorBackend_OnConnect_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, InspectorBackend_OnConnect_Params.encodedSize, 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  InspectorBackend_OnConnect_Params.encodedSize = codec.kStructHeaderSize + 0;

  InspectorBackend_OnConnect_Params.decode = function(decoder) {
    var packed;
    var val = new InspectorBackend_OnConnect_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  InspectorBackend_OnConnect_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(InspectorBackend_OnConnect_Params.encodedSize);
    encoder.writeUint32(0);
  };

  function InspectorBackend_OnDisconnect_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  InspectorBackend_OnDisconnect_Params.prototype.initDefaults_ = function() {
  };
  InspectorBackend_OnDisconnect_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  InspectorBackend_OnDisconnect_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, InspectorBackend_OnDisconnect_Params.encodedSize, 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  InspectorBackend_OnDisconnect_Params.encodedSize = codec.kStructHeaderSize + 0;

  InspectorBackend_OnDisconnect_Params.decode = function(decoder) {
    var packed;
    var val = new InspectorBackend_OnDisconnect_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  InspectorBackend_OnDisconnect_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(InspectorBackend_OnDisconnect_Params.encodedSize);
    encoder.writeUint32(0);
  };

  function InspectorBackend_OnMessage_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  InspectorBackend_OnMessage_Params.prototype.initDefaults_ = function() {
    this.message = null;
  };
  InspectorBackend_OnMessage_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  InspectorBackend_OnMessage_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, InspectorBackend_OnMessage_Params.encodedSize, 1);
    if (err !== validator.validationError.NONE)
        return err;
    // validate InspectorBackend_OnMessage_Params.message
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  InspectorBackend_OnMessage_Params.encodedSize = codec.kStructHeaderSize + 8;

  InspectorBackend_OnMessage_Params.decode = function(decoder) {
    var packed;
    var val = new InspectorBackend_OnMessage_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.message = decoder.decodeStruct(codec.String);
    return val;
  };

  InspectorBackend_OnMessage_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(InspectorBackend_OnMessage_Params.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStruct(codec.String, val.message);
  };

  var kInspectorFrontend_SendMessage_Name = 0;

  function InspectorFrontendProxy(receiver) {
    bindings.ProxyBase.call(this, receiver);
  }
  InspectorFrontendProxy.prototype = Object.create(bindings.ProxyBase.prototype);
  InspectorFrontendProxy.prototype.sendMessage = function(message) {
    var params = new InspectorFrontend_SendMessage_Params();
    params.message = message;
    var builder = new codec.MessageBuilder(
        kInspectorFrontend_SendMessage_Name,
        codec.align(InspectorFrontend_SendMessage_Params.encodedSize));
    builder.encodeStruct(InspectorFrontend_SendMessage_Params, params);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function InspectorFrontendStub(delegate) {
    bindings.StubBase.call(this, delegate);
  }
  InspectorFrontendStub.prototype = Object.create(bindings.StubBase.prototype);
  InspectorFrontendStub.prototype.sendMessage = function(message) {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.sendMessage && bindings.StubBindings(this).delegate.sendMessage(message);
  }

  InspectorFrontendStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kInspectorFrontend_SendMessage_Name:
      var params = reader.decodeStruct(InspectorFrontend_SendMessage_Params);
      this.sendMessage(params.message);
      return true;
    default:
      return false;
    }
  };

  InspectorFrontendStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return Promise.reject(Error("Unhandled message: " + reader.messageName));
    }
  };

  function validateInspectorFrontendRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kInspectorFrontend_SendMessage_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = InspectorFrontend_SendMessage_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateInspectorFrontendResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var InspectorFrontend = {
    name: 'sky::InspectorFrontend',
    proxyClass: InspectorFrontendProxy,
    stubClass: InspectorFrontendStub,
    validateRequest: validateInspectorFrontendRequest,
    validateResponse: null,
  };
  InspectorFrontendStub.prototype.validator = validateInspectorFrontendRequest;
  InspectorFrontendProxy.prototype.validator = null;

  var kInspectorBackend_OnConnect_Name = 0;
  var kInspectorBackend_OnDisconnect_Name = 1;
  var kInspectorBackend_OnMessage_Name = 2;

  function InspectorBackendProxy(receiver) {
    bindings.ProxyBase.call(this, receiver);
  }
  InspectorBackendProxy.prototype = Object.create(bindings.ProxyBase.prototype);
  InspectorBackendProxy.prototype.onConnect = function() {
    var params = new InspectorBackend_OnConnect_Params();
    var builder = new codec.MessageBuilder(
        kInspectorBackend_OnConnect_Name,
        codec.align(InspectorBackend_OnConnect_Params.encodedSize));
    builder.encodeStruct(InspectorBackend_OnConnect_Params, params);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  InspectorBackendProxy.prototype.onDisconnect = function() {
    var params = new InspectorBackend_OnDisconnect_Params();
    var builder = new codec.MessageBuilder(
        kInspectorBackend_OnDisconnect_Name,
        codec.align(InspectorBackend_OnDisconnect_Params.encodedSize));
    builder.encodeStruct(InspectorBackend_OnDisconnect_Params, params);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  InspectorBackendProxy.prototype.onMessage = function(message) {
    var params = new InspectorBackend_OnMessage_Params();
    params.message = message;
    var builder = new codec.MessageBuilder(
        kInspectorBackend_OnMessage_Name,
        codec.align(InspectorBackend_OnMessage_Params.encodedSize));
    builder.encodeStruct(InspectorBackend_OnMessage_Params, params);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function InspectorBackendStub(delegate) {
    bindings.StubBase.call(this, delegate);
  }
  InspectorBackendStub.prototype = Object.create(bindings.StubBase.prototype);
  InspectorBackendStub.prototype.onConnect = function() {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.onConnect && bindings.StubBindings(this).delegate.onConnect();
  }
  InspectorBackendStub.prototype.onDisconnect = function() {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.onDisconnect && bindings.StubBindings(this).delegate.onDisconnect();
  }
  InspectorBackendStub.prototype.onMessage = function(message) {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.onMessage && bindings.StubBindings(this).delegate.onMessage(message);
  }

  InspectorBackendStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kInspectorBackend_OnConnect_Name:
      var params = reader.decodeStruct(InspectorBackend_OnConnect_Params);
      this.onConnect();
      return true;
    case kInspectorBackend_OnDisconnect_Name:
      var params = reader.decodeStruct(InspectorBackend_OnDisconnect_Params);
      this.onDisconnect();
      return true;
    case kInspectorBackend_OnMessage_Name:
      var params = reader.decodeStruct(InspectorBackend_OnMessage_Params);
      this.onMessage(params.message);
      return true;
    default:
      return false;
    }
  };

  InspectorBackendStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return Promise.reject(Error("Unhandled message: " + reader.messageName));
    }
  };

  function validateInspectorBackendRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kInspectorBackend_OnConnect_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = InspectorBackend_OnConnect_Params;
      break;
      case kInspectorBackend_OnDisconnect_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = InspectorBackend_OnDisconnect_Params;
      break;
      case kInspectorBackend_OnMessage_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = InspectorBackend_OnMessage_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateInspectorBackendResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var InspectorBackend = {
    name: 'sky::InspectorBackend',
    proxyClass: InspectorBackendProxy,
    stubClass: InspectorBackendStub,
    validateRequest: validateInspectorBackendRequest,
    validateResponse: null,
  };
  InspectorBackendStub.prototype.validator = validateInspectorBackendRequest;
  InspectorBackendProxy.prototype.validator = null;


  var exports = {};
  exports.InspectorFrontend = InspectorFrontend;
  exports.InspectorBackend = InspectorBackend;

  module.exports = exports;
</script>

<!-- Copyright 2014 The Chromium Authors. All rights reserved.
     Use of this source code is governed by a BSD-style license that can be
     found in the LICENSE file. -->

<import src="/gen/mojo/public/sky/bindings.sky" as="bindings" />
<import src="/gen/mojo/public/sky/codec.sky" as="codec" />
<import src="/gen/mojo/public/sky/connection.sky" as="connection" />
<import src="/gen/mojo/public/sky/core.sky" as="core" />
<import src="/gen/mojo/public/sky/validator.sky" as="validator" />
<script>
  var kLong = 4405;
  var Enum = {};
  Enum.VALUE = 0;

  function Provider_EchoString_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Provider_EchoString_Params.prototype.initDefaults_ = function() {
    this.a = null;
  };
  Provider_EchoString_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Provider_EchoString_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, Provider_EchoString_Params.encodedSize, 1);
    if (err !== validator.validationError.NONE)
        return err;
    // validate Provider_EchoString_Params.a
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Provider_EchoString_Params.encodedSize = codec.kStructHeaderSize + 8;

  Provider_EchoString_Params.decode = function(decoder) {
    var packed;
    var val = new Provider_EchoString_Params();
    var numberOfBytes = decoder.readUint32();
    var numberOfFields = decoder.readUint32();
    val.a = decoder.decodeStruct(codec.String);
    return val;
  };

  Provider_EchoString_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Provider_EchoString_Params.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStruct(codec.String, val.a);
  };

  function Provider_EchoString_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Provider_EchoString_ResponseParams.prototype.initDefaults_ = function() {
    this.a = null;
  };
  Provider_EchoString_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Provider_EchoString_ResponseParams.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, Provider_EchoString_ResponseParams.encodedSize, 1);
    if (err !== validator.validationError.NONE)
        return err;
    // validate Provider_EchoString_ResponseParams.a
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Provider_EchoString_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  Provider_EchoString_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Provider_EchoString_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var numberOfFields = decoder.readUint32();
    val.a = decoder.decodeStruct(codec.String);
    return val;
  };

  Provider_EchoString_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Provider_EchoString_ResponseParams.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStruct(codec.String, val.a);
  };

  function Provider_EchoStrings_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Provider_EchoStrings_Params.prototype.initDefaults_ = function() {
    this.a = null;
    this.b = null;
  };
  Provider_EchoStrings_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Provider_EchoStrings_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, Provider_EchoStrings_Params.encodedSize, 2);
    if (err !== validator.validationError.NONE)
        return err;
    // validate Provider_EchoStrings_Params.a
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;
    // validate Provider_EchoStrings_Params.b
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Provider_EchoStrings_Params.encodedSize = codec.kStructHeaderSize + 16;

  Provider_EchoStrings_Params.decode = function(decoder) {
    var packed;
    var val = new Provider_EchoStrings_Params();
    var numberOfBytes = decoder.readUint32();
    var numberOfFields = decoder.readUint32();
    val.a = decoder.decodeStruct(codec.String);
    val.b = decoder.decodeStruct(codec.String);
    return val;
  };

  Provider_EchoStrings_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Provider_EchoStrings_Params.encodedSize);
    encoder.writeUint32(2);
    encoder.encodeStruct(codec.String, val.a);
    encoder.encodeStruct(codec.String, val.b);
  };

  function Provider_EchoStrings_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Provider_EchoStrings_ResponseParams.prototype.initDefaults_ = function() {
    this.a = null;
    this.b = null;
  };
  Provider_EchoStrings_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Provider_EchoStrings_ResponseParams.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, Provider_EchoStrings_ResponseParams.encodedSize, 2);
    if (err !== validator.validationError.NONE)
        return err;
    // validate Provider_EchoStrings_ResponseParams.a
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;
    // validate Provider_EchoStrings_ResponseParams.b
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Provider_EchoStrings_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  Provider_EchoStrings_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Provider_EchoStrings_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var numberOfFields = decoder.readUint32();
    val.a = decoder.decodeStruct(codec.String);
    val.b = decoder.decodeStruct(codec.String);
    return val;
  };

  Provider_EchoStrings_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Provider_EchoStrings_ResponseParams.encodedSize);
    encoder.writeUint32(2);
    encoder.encodeStruct(codec.String, val.a);
    encoder.encodeStruct(codec.String, val.b);
  };

  function Provider_EchoMessagePipeHandle_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Provider_EchoMessagePipeHandle_Params.prototype.initDefaults_ = function() {
    this.a = null;
  };
  Provider_EchoMessagePipeHandle_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Provider_EchoMessagePipeHandle_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, Provider_EchoMessagePipeHandle_Params.encodedSize, 1);
    if (err !== validator.validationError.NONE)
        return err;
    // validate Provider_EchoMessagePipeHandle_Params.a
    err = messageValidator.validateHandle(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Provider_EchoMessagePipeHandle_Params.encodedSize = codec.kStructHeaderSize + 8;

  Provider_EchoMessagePipeHandle_Params.decode = function(decoder) {
    var packed;
    var val = new Provider_EchoMessagePipeHandle_Params();
    var numberOfBytes = decoder.readUint32();
    var numberOfFields = decoder.readUint32();
    val.a = decoder.decodeStruct(codec.Handle);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Provider_EchoMessagePipeHandle_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Provider_EchoMessagePipeHandle_Params.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStruct(codec.Handle, val.a);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function Provider_EchoMessagePipeHandle_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Provider_EchoMessagePipeHandle_ResponseParams.prototype.initDefaults_ = function() {
    this.a = null;
  };
  Provider_EchoMessagePipeHandle_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Provider_EchoMessagePipeHandle_ResponseParams.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, Provider_EchoMessagePipeHandle_ResponseParams.encodedSize, 1);
    if (err !== validator.validationError.NONE)
        return err;
    // validate Provider_EchoMessagePipeHandle_ResponseParams.a
    err = messageValidator.validateHandle(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Provider_EchoMessagePipeHandle_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  Provider_EchoMessagePipeHandle_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Provider_EchoMessagePipeHandle_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var numberOfFields = decoder.readUint32();
    val.a = decoder.decodeStruct(codec.Handle);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Provider_EchoMessagePipeHandle_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Provider_EchoMessagePipeHandle_ResponseParams.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStruct(codec.Handle, val.a);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function Provider_EchoEnum_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Provider_EchoEnum_Params.prototype.initDefaults_ = function() {
    this.a = 0;
  };
  Provider_EchoEnum_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Provider_EchoEnum_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, Provider_EchoEnum_Params.encodedSize, 1);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Provider_EchoEnum_Params.encodedSize = codec.kStructHeaderSize + 8;

  Provider_EchoEnum_Params.decode = function(decoder) {
    var packed;
    var val = new Provider_EchoEnum_Params();
    var numberOfBytes = decoder.readUint32();
    var numberOfFields = decoder.readUint32();
    val.a = decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Provider_EchoEnum_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Provider_EchoEnum_Params.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStruct(codec.Int32, val.a);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function Provider_EchoEnum_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Provider_EchoEnum_ResponseParams.prototype.initDefaults_ = function() {
    this.a = 0;
  };
  Provider_EchoEnum_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Provider_EchoEnum_ResponseParams.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, Provider_EchoEnum_ResponseParams.encodedSize, 1);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Provider_EchoEnum_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  Provider_EchoEnum_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Provider_EchoEnum_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var numberOfFields = decoder.readUint32();
    val.a = decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Provider_EchoEnum_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Provider_EchoEnum_ResponseParams.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStruct(codec.Int32, val.a);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  var kProvider_EchoString_Name = 0;
  var kProvider_EchoStrings_Name = 1;
  var kProvider_EchoMessagePipeHandle_Name = 2;
  var kProvider_EchoEnum_Name = 3;

  function ProviderProxy(receiver) {
    bindings.ProxyBase.call(this, receiver);
  }
  ProviderProxy.prototype = Object.create(bindings.ProxyBase.prototype);
  ProviderProxy.prototype.echoString = function(a) {
    var params = new Provider_EchoString_Params();
    params.a = a;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageWithRequestIDBuilder(
          kProvider_EchoString_Name,
          codec.align(Provider_EchoString_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Provider_EchoString_Params, params);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Provider_EchoString_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ProviderProxy.prototype.echoStrings = function(a, b) {
    var params = new Provider_EchoStrings_Params();
    params.a = a;
    params.b = b;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageWithRequestIDBuilder(
          kProvider_EchoStrings_Name,
          codec.align(Provider_EchoStrings_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Provider_EchoStrings_Params, params);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Provider_EchoStrings_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ProviderProxy.prototype.echoMessagePipeHandle = function(a) {
    var params = new Provider_EchoMessagePipeHandle_Params();
    params.a = a;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageWithRequestIDBuilder(
          kProvider_EchoMessagePipeHandle_Name,
          codec.align(Provider_EchoMessagePipeHandle_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Provider_EchoMessagePipeHandle_Params, params);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Provider_EchoMessagePipeHandle_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ProviderProxy.prototype.echoEnum = function(a) {
    var params = new Provider_EchoEnum_Params();
    params.a = a;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageWithRequestIDBuilder(
          kProvider_EchoEnum_Name,
          codec.align(Provider_EchoEnum_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Provider_EchoEnum_Params, params);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Provider_EchoEnum_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function ProviderStub(delegate) {
    bindings.StubBase.call(this, delegate);
  }
  ProviderStub.prototype = Object.create(bindings.StubBase.prototype);
  ProviderStub.prototype.echoString = function(a) {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.echoString && bindings.StubBindings(this).delegate.echoString(a);
  }
  ProviderStub.prototype.echoStrings = function(a, b) {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.echoStrings && bindings.StubBindings(this).delegate.echoStrings(a, b);
  }
  ProviderStub.prototype.echoMessagePipeHandle = function(a) {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.echoMessagePipeHandle && bindings.StubBindings(this).delegate.echoMessagePipeHandle(a);
  }
  ProviderStub.prototype.echoEnum = function(a) {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.echoEnum && bindings.StubBindings(this).delegate.echoEnum(a);
  }

  ProviderStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  ProviderStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kProvider_EchoString_Name:
      var params = reader.decodeStruct(Provider_EchoString_Params);
      return this.echoString(params.a).then(function(response) {
        var responseParams =
            new Provider_EchoString_ResponseParams();
        responseParams.a = response.a;
        var builder = new codec.MessageWithRequestIDBuilder(
            kProvider_EchoString_Name,
            codec.align(Provider_EchoString_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Provider_EchoString_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
    case kProvider_EchoStrings_Name:
      var params = reader.decodeStruct(Provider_EchoStrings_Params);
      return this.echoStrings(params.a, params.b).then(function(response) {
        var responseParams =
            new Provider_EchoStrings_ResponseParams();
        responseParams.a = response.a;
        responseParams.b = response.b;
        var builder = new codec.MessageWithRequestIDBuilder(
            kProvider_EchoStrings_Name,
            codec.align(Provider_EchoStrings_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Provider_EchoStrings_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
    case kProvider_EchoMessagePipeHandle_Name:
      var params = reader.decodeStruct(Provider_EchoMessagePipeHandle_Params);
      return this.echoMessagePipeHandle(params.a).then(function(response) {
        var responseParams =
            new Provider_EchoMessagePipeHandle_ResponseParams();
        responseParams.a = response.a;
        var builder = new codec.MessageWithRequestIDBuilder(
            kProvider_EchoMessagePipeHandle_Name,
            codec.align(Provider_EchoMessagePipeHandle_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Provider_EchoMessagePipeHandle_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
    case kProvider_EchoEnum_Name:
      var params = reader.decodeStruct(Provider_EchoEnum_Params);
      return this.echoEnum(params.a).then(function(response) {
        var responseParams =
            new Provider_EchoEnum_ResponseParams();
        responseParams.a = response.a;
        var builder = new codec.MessageWithRequestIDBuilder(
            kProvider_EchoEnum_Name,
            codec.align(Provider_EchoEnum_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Provider_EchoEnum_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
    default:
      return Promise.reject(Error("Unhandled message: " + reader.messageName));
    }
  };

  function validateProviderRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kProvider_EchoString_Name:
        if (message.expectsResponse())
          paramsClass = Provider_EchoString_Params;
      break;
      case kProvider_EchoStrings_Name:
        if (message.expectsResponse())
          paramsClass = Provider_EchoStrings_Params;
      break;
      case kProvider_EchoMessagePipeHandle_Name:
        if (message.expectsResponse())
          paramsClass = Provider_EchoMessagePipeHandle_Params;
      break;
      case kProvider_EchoEnum_Name:
        if (message.expectsResponse())
          paramsClass = Provider_EchoEnum_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateProviderResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kProvider_EchoString_Name:
        if (message.isResponse())
          paramsClass = Provider_EchoString_ResponseParams;
        break;
      case kProvider_EchoStrings_Name:
        if (message.isResponse())
          paramsClass = Provider_EchoStrings_ResponseParams;
        break;
      case kProvider_EchoMessagePipeHandle_Name:
        if (message.isResponse())
          paramsClass = Provider_EchoMessagePipeHandle_ResponseParams;
        break;
      case kProvider_EchoEnum_Name:
        if (message.isResponse())
          paramsClass = Provider_EchoEnum_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var Provider = {
    name: 'sample::Provider',
    proxyClass: ProviderProxy,
    stubClass: ProviderStub,
    validateRequest: validateProviderRequest,
    validateResponse: validateProviderResponse,
  };
  ProviderStub.prototype.validator = validateProviderRequest;
  ProviderProxy.prototype.validator = validateProviderResponse;


  function ProviderClientProxy(receiver) {
    bindings.ProxyBase.call(this, receiver);
  }
  ProviderClientProxy.prototype = Object.create(bindings.ProxyBase.prototype);

  function ProviderClientStub(delegate) {
    bindings.StubBase.call(this, delegate);
  }
  ProviderClientStub.prototype = Object.create(bindings.StubBase.prototype);

  ProviderClientStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  ProviderClientStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return Promise.reject(Error("Unhandled message: " + reader.messageName));
    }
  };

  function validateProviderClientRequest(messageValidator) {
    return validator.validationError.NONE;
  }

  function validateProviderClientResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var ProviderClient = {
    name: 'sample::ProviderClient',
    proxyClass: ProviderClientProxy,
    stubClass: ProviderClientStub,
    validateRequest: validateProviderClientRequest,
    validateResponse: null,
  };
  ProviderClientStub.prototype.validator = validateProviderClientRequest;
  ProviderClientProxy.prototype.validator = null;


  var exports = {};
  exports.kLong = kLong;
  exports.Enum = Enum;
  exports.Provider = Provider;
  exports.Provider.client = ProviderClient;
  exports.ProviderClient = ProviderClient;

  module.exports = exports;
</script>

<!-- Copyright 2014 The Chromium Authors. All rights reserved.
     Use of this source code is governed by a BSD-style license that can be
     found in the LICENSE file. -->

<import src="/gen/mojo/public/sky/bindings.sky" as="bindings" />
<import src="/gen/mojo/public/sky/codec.sky" as="codec" />
<import src="/gen/mojo/public/sky/connection.sky" as="connection" />
<import src="/gen/mojo/public/sky/core.sky" as="core" />
<import src="/gen/mojo/public/sky/validator.sky" as="validator" />
<import src="/gen/mojo/services/geometry/public/interfaces/geometry.mojom.sky" as="geometry$" />
<script>

  function AxNode(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AxNode.prototype.initDefaults_ = function() {
    this.id = 0;
    this.parent_id = 0;
    this.next_sibling_id = 0;
    this.bounds = null;
    this.link = null;
    this.text = null;
  };
  AxNode.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AxNode.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, AxNode.encodedSize, 6);
    if (err !== validator.validationError.NONE)
        return err;
    // validate AxNode.bounds
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, geometry$.Rect, false);
    if (err !== validator.validationError.NONE)
        return err;
    // validate AxNode.link
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, AxLink, true);
    if (err !== validator.validationError.NONE)
        return err;
    // validate AxNode.text
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 32, AxText, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AxNode.encodedSize = codec.kStructHeaderSize + 40;

  AxNode.decode = function(decoder) {
    var packed;
    var val = new AxNode();
    var numberOfBytes = decoder.readUint32();
    var numberOfFields = decoder.readUint32();
    val.id = decoder.decodeStruct(codec.Uint32);
    val.parent_id = decoder.decodeStruct(codec.Uint32);
    val.next_sibling_id = decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.bounds = decoder.decodeStructPointer(geometry$.Rect);
    val.link = decoder.decodeStructPointer(AxLink);
    val.text = decoder.decodeStructPointer(AxText);
    return val;
  };

  AxNode.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AxNode.encodedSize);
    encoder.writeUint32(6);
    encoder.encodeStruct(codec.Uint32, val.id);
    encoder.encodeStruct(codec.Uint32, val.parent_id);
    encoder.encodeStruct(codec.Uint32, val.next_sibling_id);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(geometry$.Rect, val.bounds);
    encoder.encodeStructPointer(AxLink, val.link);
    encoder.encodeStructPointer(AxText, val.text);
  };

  function AxLink(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AxLink.prototype.initDefaults_ = function() {
    this.url = null;
  };
  AxLink.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AxLink.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, AxLink.encodedSize, 1);
    if (err !== validator.validationError.NONE)
        return err;
    // validate AxLink.url
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AxLink.encodedSize = codec.kStructHeaderSize + 8;

  AxLink.decode = function(decoder) {
    var packed;
    var val = new AxLink();
    var numberOfBytes = decoder.readUint32();
    var numberOfFields = decoder.readUint32();
    val.url = decoder.decodeStruct(codec.String);
    return val;
  };

  AxLink.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AxLink.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStruct(codec.String, val.url);
  };

  function AxText(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AxText.prototype.initDefaults_ = function() {
    this.content = null;
  };
  AxText.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AxText.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, AxText.encodedSize, 1);
    if (err !== validator.validationError.NONE)
        return err;
    // validate AxText.content
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AxText.encodedSize = codec.kStructHeaderSize + 8;

  AxText.decode = function(decoder) {
    var packed;
    var val = new AxText();
    var numberOfBytes = decoder.readUint32();
    var numberOfFields = decoder.readUint32();
    val.content = decoder.decodeStruct(codec.String);
    return val;
  };

  AxText.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AxText.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStruct(codec.String, val.content);
  };

  function AxProvider_GetTree_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AxProvider_GetTree_Params.prototype.initDefaults_ = function() {
  };
  AxProvider_GetTree_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AxProvider_GetTree_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, AxProvider_GetTree_Params.encodedSize, 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AxProvider_GetTree_Params.encodedSize = codec.kStructHeaderSize + 0;

  AxProvider_GetTree_Params.decode = function(decoder) {
    var packed;
    var val = new AxProvider_GetTree_Params();
    var numberOfBytes = decoder.readUint32();
    var numberOfFields = decoder.readUint32();
    return val;
  };

  AxProvider_GetTree_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AxProvider_GetTree_Params.encodedSize);
    encoder.writeUint32(0);
  };

  function AxProvider_GetTree_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AxProvider_GetTree_ResponseParams.prototype.initDefaults_ = function() {
    this.nodes = null;
  };
  AxProvider_GetTree_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AxProvider_GetTree_ResponseParams.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, AxProvider_GetTree_ResponseParams.encodedSize, 1);
    if (err !== validator.validationError.NONE)
        return err;
    // validate AxProvider_GetTree_ResponseParams.nodes
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(AxNode), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AxProvider_GetTree_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  AxProvider_GetTree_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new AxProvider_GetTree_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var numberOfFields = decoder.readUint32();
    val.nodes = decoder.decodeArrayPointer(new codec.PointerTo(AxNode));
    return val;
  };

  AxProvider_GetTree_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AxProvider_GetTree_ResponseParams.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeArrayPointer(new codec.PointerTo(AxNode), val.nodes);
  };

  var kAxProvider_GetTree_Name = 0;

  function AxProviderProxy(receiver) {
    bindings.ProxyBase.call(this, receiver);
  }
  AxProviderProxy.prototype = Object.create(bindings.ProxyBase.prototype);
  AxProviderProxy.prototype.getTree = function() {
    var params = new AxProvider_GetTree_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageWithRequestIDBuilder(
          kAxProvider_GetTree_Name,
          codec.align(AxProvider_GetTree_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(AxProvider_GetTree_Params, params);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(AxProvider_GetTree_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function AxProviderStub(delegate) {
    bindings.StubBase.call(this, delegate);
  }
  AxProviderStub.prototype = Object.create(bindings.StubBase.prototype);
  AxProviderStub.prototype.getTree = function() {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.getTree && bindings.StubBindings(this).delegate.getTree();
  }

  AxProviderStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  AxProviderStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kAxProvider_GetTree_Name:
      var params = reader.decodeStruct(AxProvider_GetTree_Params);
      return this.getTree().then(function(response) {
        var responseParams =
            new AxProvider_GetTree_ResponseParams();
        responseParams.nodes = response.nodes;
        var builder = new codec.MessageWithRequestIDBuilder(
            kAxProvider_GetTree_Name,
            codec.align(AxProvider_GetTree_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(AxProvider_GetTree_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
    default:
      return Promise.reject(Error("Unhandled message: " + reader.messageName));
    }
  };

  function validateAxProviderRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kAxProvider_GetTree_Name:
        if (message.expectsResponse())
          paramsClass = AxProvider_GetTree_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateAxProviderResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kAxProvider_GetTree_Name:
        if (message.isResponse())
          paramsClass = AxProvider_GetTree_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var AxProvider = {
    name: 'mojo::AxProvider',
    proxyClass: AxProviderProxy,
    stubClass: AxProviderStub,
    validateRequest: validateAxProviderRequest,
    validateResponse: validateAxProviderResponse,
  };
  AxProviderStub.prototype.validator = validateAxProviderRequest;
  AxProviderProxy.prototype.validator = validateAxProviderResponse;


  var exports = {};
  exports.AxNode = AxNode;
  exports.AxLink = AxLink;
  exports.AxText = AxText;
  exports.AxProvider = AxProvider;

  module.exports = exports;
</script>

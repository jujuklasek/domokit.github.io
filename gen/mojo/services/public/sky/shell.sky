<import src="/gen/mojo/public/sky/bindings.sky" as="bindings" />
<import src="/gen/mojo/public/sky/core.sky" as="core" />
<import src="/gen/mojo/public/sky/connection.sky" as="connection" />
<import src="/gen/mojo/public/interfaces/application/shell.mojom.sky" as="shellMojom" />
<import src="/gen/mojo/public/interfaces/application/service_provider.mojom.sky" as="spMojom" />
<import src="/gen/mojo/services/public/sky/service_exchange.sky" as="serviceExchange" />
<script>

  const ProxyBindings = bindings.ProxyBindings;
  const StubBindings = bindings.StubBindings;
  const ServiceExchange = serviceExchange.ServiceExchange;
  const ServiceProviderInterface = spMojom.ServiceProvider;
  const ShellInterface = shellMojom.Shell;

  class Shell {
    constructor(shellProxy) {
      this.shellProxy = shellProxy;
      this.applications_ = new Map();
    }

    connectToApplication(url) {
      var application = this.applications_.get(url);
      if (application)
        return application;

      var application = new ServiceExchange();
      this.shellProxy.connectToApplication(url,
          function(servicesProxy) {
            application.proxy = servicesProxy;
          },
          function(exposedServicesStub) {
            application.stub = exposedServicesStub;
            StubBindings(exposedServicesStub).delegate = application;
          });
      this.applications_.set(url, application);
      return application;
    }

    connectToService(url, service) {
      return this.connectToApplication(url).requestService(service);
    };

    close() {
      this.applications_.forEach(function(application, url) {
        application.close();
      });
      ProxyBindings(this.shellProxy).close();
      this.applications_.clear();
    }
  }

  var exports = {};
  exports.Shell = Shell;
  module.exports = exports;
</script>
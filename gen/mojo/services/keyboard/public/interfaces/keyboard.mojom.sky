<!-- Copyright 2014 The Chromium Authors. All rights reserved.
     Use of this source code is governed by a BSD-style license that can be
     found in the LICENSE file. -->

<import src="/gen/mojo/public/sky/bindings.sky" as="bindings" />
<import src="/gen/mojo/public/sky/codec.sky" as="codec" />
<import src="/gen/mojo/public/sky/connection.sky" as="connection" />
<import src="/gen/mojo/public/sky/core.sky" as="core" />
<import src="/gen/mojo/public/sky/validator.sky" as="validator" />
<script>

  function Keyboard_Show_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Keyboard_Show_Params.prototype.initDefaults_ = function() {
  };
  Keyboard_Show_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Keyboard_Show_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, Keyboard_Show_Params.encodedSize, 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Keyboard_Show_Params.encodedSize = codec.kStructHeaderSize + 0;

  Keyboard_Show_Params.decode = function(decoder) {
    var packed;
    var val = new Keyboard_Show_Params();
    var numberOfBytes = decoder.readUint32();
    var numberOfFields = decoder.readUint32();
    return val;
  };

  Keyboard_Show_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Keyboard_Show_Params.encodedSize);
    encoder.writeUint32(0);
  };

  function Keyboard_Hide_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Keyboard_Hide_Params.prototype.initDefaults_ = function() {
  };
  Keyboard_Hide_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Keyboard_Hide_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, Keyboard_Hide_Params.encodedSize, 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Keyboard_Hide_Params.encodedSize = codec.kStructHeaderSize + 0;

  Keyboard_Hide_Params.decode = function(decoder) {
    var packed;
    var val = new Keyboard_Hide_Params();
    var numberOfBytes = decoder.readUint32();
    var numberOfFields = decoder.readUint32();
    return val;
  };

  Keyboard_Hide_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Keyboard_Hide_Params.encodedSize);
    encoder.writeUint32(0);
  };

  var kKeyboard_Show_Name = 0;
  var kKeyboard_Hide_Name = 1;

  function KeyboardProxy(receiver) {
    bindings.ProxyBase.call(this, receiver);
  }
  KeyboardProxy.prototype = Object.create(bindings.ProxyBase.prototype);
  KeyboardProxy.prototype.show = function() {
    var params = new Keyboard_Show_Params();
    var builder = new codec.MessageBuilder(
        kKeyboard_Show_Name,
        codec.align(Keyboard_Show_Params.encodedSize));
    builder.encodeStruct(Keyboard_Show_Params, params);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  KeyboardProxy.prototype.hide = function() {
    var params = new Keyboard_Hide_Params();
    var builder = new codec.MessageBuilder(
        kKeyboard_Hide_Name,
        codec.align(Keyboard_Hide_Params.encodedSize));
    builder.encodeStruct(Keyboard_Hide_Params, params);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function KeyboardStub(delegate) {
    bindings.StubBase.call(this, delegate);
  }
  KeyboardStub.prototype = Object.create(bindings.StubBase.prototype);
  KeyboardStub.prototype.show = function() {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.show && bindings.StubBindings(this).delegate.show();
  }
  KeyboardStub.prototype.hide = function() {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.hide && bindings.StubBindings(this).delegate.hide();
  }

  KeyboardStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kKeyboard_Show_Name:
      var params = reader.decodeStruct(Keyboard_Show_Params);
      this.show();
      return true;
    case kKeyboard_Hide_Name:
      var params = reader.decodeStruct(Keyboard_Hide_Params);
      this.hide();
      return true;
    default:
      return false;
    }
  };

  KeyboardStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return Promise.reject(Error("Unhandled message: " + reader.messageName));
    }
  };

  function validateKeyboardRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kKeyboard_Show_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Keyboard_Show_Params;
      break;
      case kKeyboard_Hide_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Keyboard_Hide_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateKeyboardResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var Keyboard = {
    name: 'mojo::Keyboard',
    proxyClass: KeyboardProxy,
    stubClass: KeyboardStub,
    validateRequest: validateKeyboardRequest,
    validateResponse: null,
  };
  KeyboardStub.prototype.validator = validateKeyboardRequest;
  KeyboardProxy.prototype.validator = null;


  var exports = {};
  exports.Keyboard = Keyboard;

  module.exports = exports;
</script>

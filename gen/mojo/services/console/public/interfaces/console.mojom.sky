<!-- Copyright 2014 The Chromium Authors. All rights reserved.
     Use of this source code is governed by a BSD-style license that can be
     found in the LICENSE file. -->

<import src="/gen/mojo/public/sky/bindings.sky" as="bindings" />
<import src="/gen/mojo/public/sky/codec.sky" as="codec" />
<import src="/gen/mojo/public/sky/connection.sky" as="connection" />
<import src="/gen/mojo/public/sky/core.sky" as="core" />
<import src="/gen/mojo/public/sky/validator.sky" as="validator" />
<script>

  function Console_ReadLine_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Console_ReadLine_Params.prototype.initDefaults_ = function() {
  };
  Console_ReadLine_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Console_ReadLine_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, Console_ReadLine_Params.encodedSize, 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Console_ReadLine_Params.encodedSize = codec.kStructHeaderSize + 0;

  Console_ReadLine_Params.decode = function(decoder) {
    var packed;
    var val = new Console_ReadLine_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  Console_ReadLine_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Console_ReadLine_Params.encodedSize);
    encoder.writeUint32(0);
  };

  function Console_ReadLine_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Console_ReadLine_ResponseParams.prototype.initDefaults_ = function() {
    this.success = false;
    this.line = null;
  };
  Console_ReadLine_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Console_ReadLine_ResponseParams.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, Console_ReadLine_ResponseParams.encodedSize, 2);
    if (err !== validator.validationError.NONE)
        return err;
    // validate Console_ReadLine_ResponseParams.line
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Console_ReadLine_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  Console_ReadLine_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Console_ReadLine_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.success = decoder.decodeStruct(codec.Uint8);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.line = decoder.decodeStruct(codec.String);
    return val;
  };

  Console_ReadLine_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Console_ReadLine_ResponseParams.encodedSize);
    encoder.writeUint32(2);
    encoder.encodeStruct(codec.Uint8, val.success);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.String, val.line);
  };

  function Console_PrintLines_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Console_PrintLines_Params.prototype.initDefaults_ = function() {
    this.lines = null;
  };
  Console_PrintLines_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Console_PrintLines_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, Console_PrintLines_Params.encodedSize, 1);
    if (err !== validator.validationError.NONE)
        return err;
    // validate Console_PrintLines_Params.lines
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, codec.String, false, [0, 0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Console_PrintLines_Params.encodedSize = codec.kStructHeaderSize + 8;

  Console_PrintLines_Params.decode = function(decoder) {
    var packed;
    var val = new Console_PrintLines_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.lines = decoder.decodeArrayPointer(codec.String);
    return val;
  };

  Console_PrintLines_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Console_PrintLines_Params.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeArrayPointer(codec.String, val.lines);
  };

  function Console_PrintLines_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Console_PrintLines_ResponseParams.prototype.initDefaults_ = function() {
    this.success = false;
  };
  Console_PrintLines_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Console_PrintLines_ResponseParams.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, Console_PrintLines_ResponseParams.encodedSize, 1);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Console_PrintLines_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  Console_PrintLines_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Console_PrintLines_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.success = decoder.decodeStruct(codec.Uint8);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Console_PrintLines_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Console_PrintLines_ResponseParams.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStruct(codec.Uint8, val.success);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  var kConsole_ReadLine_Name = 0;
  var kConsole_PrintLines_Name = 1;

  function ConsoleProxy(receiver) {
    bindings.ProxyBase.call(this, receiver);
  }
  ConsoleProxy.prototype = Object.create(bindings.ProxyBase.prototype);
  ConsoleProxy.prototype.readLine = function() {
    var params = new Console_ReadLine_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageWithRequestIDBuilder(
          kConsole_ReadLine_Name,
          codec.align(Console_ReadLine_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Console_ReadLine_Params, params);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Console_ReadLine_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ConsoleProxy.prototype.printLines = function(lines) {
    var params = new Console_PrintLines_Params();
    params.lines = lines;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageWithRequestIDBuilder(
          kConsole_PrintLines_Name,
          codec.align(Console_PrintLines_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Console_PrintLines_Params, params);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Console_PrintLines_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function ConsoleStub(delegate) {
    bindings.StubBase.call(this, delegate);
  }
  ConsoleStub.prototype = Object.create(bindings.StubBase.prototype);
  ConsoleStub.prototype.readLine = function() {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.readLine && bindings.StubBindings(this).delegate.readLine();
  }
  ConsoleStub.prototype.printLines = function(lines) {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.printLines && bindings.StubBindings(this).delegate.printLines(lines);
  }

  ConsoleStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  ConsoleStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kConsole_ReadLine_Name:
      var params = reader.decodeStruct(Console_ReadLine_Params);
      return this.readLine().then(function(response) {
        var responseParams =
            new Console_ReadLine_ResponseParams();
        responseParams.success = response.success;
        responseParams.line = response.line;
        var builder = new codec.MessageWithRequestIDBuilder(
            kConsole_ReadLine_Name,
            codec.align(Console_ReadLine_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Console_ReadLine_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
    case kConsole_PrintLines_Name:
      var params = reader.decodeStruct(Console_PrintLines_Params);
      return this.printLines(params.lines).then(function(response) {
        var responseParams =
            new Console_PrintLines_ResponseParams();
        responseParams.success = response.success;
        var builder = new codec.MessageWithRequestIDBuilder(
            kConsole_PrintLines_Name,
            codec.align(Console_PrintLines_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Console_PrintLines_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
    default:
      return Promise.reject(Error("Unhandled message: " + reader.messageName));
    }
  };

  function validateConsoleRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kConsole_ReadLine_Name:
        if (message.expectsResponse())
          paramsClass = Console_ReadLine_Params;
      break;
      case kConsole_PrintLines_Name:
        if (message.expectsResponse())
          paramsClass = Console_PrintLines_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateConsoleResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kConsole_ReadLine_Name:
        if (message.isResponse())
          paramsClass = Console_ReadLine_ResponseParams;
        break;
      case kConsole_PrintLines_Name:
        if (message.isResponse())
          paramsClass = Console_PrintLines_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var Console = {
    name: 'mojo::Console',
    proxyClass: ConsoleProxy,
    stubClass: ConsoleStub,
    validateRequest: validateConsoleRequest,
    validateResponse: validateConsoleResponse,
  };
  ConsoleStub.prototype.validator = validateConsoleRequest;
  ConsoleProxy.prototype.validator = validateConsoleResponse;


  var exports = {};
  exports.Console = Console;

  module.exports = exports;
</script>

<!-- Copyright 2014 The Chromium Authors. All rights reserved.
     Use of this source code is governed by a BSD-style license that can be
     found in the LICENSE file. -->

<import src="/gen/mojo/public/sky/bindings.sky" as="bindings" />
<import src="/gen/mojo/public/sky/codec.sky" as="codec" />
<import src="/gen/mojo/public/sky/connection.sky" as="connection" />
<import src="/gen/mojo/public/sky/core.sky" as="core" />
<import src="/gen/mojo/public/sky/validator.sky" as="validator" />
<import src="/gen/mojo/services/geometry/public/interfaces/geometry.mojom.sky" as="geometry$" />
<import src="/gen/mojo/services/input_events/public/interfaces/input_events.mojom.sky" as="input_events$" />
<import src="/gen/mojo/public/interfaces/application/service_provider.mojom.sky" as="service_provider$" />
<import src="/gen/mojo/services/native_viewport/public/interfaces/native_viewport.mojom.sky" as="native_viewport$" />
<import src="/gen/mojo/services/surfaces/public/interfaces/surface_id.mojom.sky" as="surface_id$" />
<import src="/gen/mojo/services/view_manager/public/interfaces/view_manager_constants.mojom.sky" as="view_manager_constants$" />
<script>
  var ErrorCode = {};
  ErrorCode.NONE = 0;
  ErrorCode.VALUE_IN_USE = ErrorCode.NONE + 1;
  ErrorCode.ILLEGAL_ARGUMENT = ErrorCode.VALUE_IN_USE + 1;

  function ViewData(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ViewData.prototype.initDefaults_ = function() {
    this.parent_id = 0;
    this.view_id = 0;
    this.bounds = null;
    this.properties = null;
    this.visible = false;
    this.drawn = false;
    this.viewport_metrics = null;
  };
  ViewData.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ViewData.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, ViewData.encodedSize, 7);
    if (err !== validator.validationError.NONE)
        return err;
    // validate ViewData.bounds
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, geometry$.Rect, false);
    if (err !== validator.validationError.NONE)
        return err;
    // validate ViewData.properties
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 16, false, codec.String, new codec.ArrayOf(codec.Uint8), false);
    if (err !== validator.validationError.NONE)
        return err;
    // validate ViewData.viewport_metrics
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 32, native_viewport$.ViewportMetrics, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ViewData.encodedSize = codec.kStructHeaderSize + 40;

  ViewData.decode = function(decoder) {
    var packed;
    var val = new ViewData();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.parent_id = decoder.decodeStruct(codec.Uint32);
    val.view_id = decoder.decodeStruct(codec.Uint32);
    val.bounds = decoder.decodeStructPointer(geometry$.Rect);
    val.properties = decoder.decodeMapPointer(codec.String, new codec.ArrayOf(codec.Uint8));
    packed = decoder.readUint8();
    val.visible = (packed >> 0) & 1 ? true : false;
    val.drawn = (packed >> 1) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.viewport_metrics = decoder.decodeStructPointer(native_viewport$.ViewportMetrics);
    return val;
  };

  ViewData.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ViewData.encodedSize);
    encoder.writeUint32(7);
    encoder.encodeStruct(codec.Uint32, val.parent_id);
    encoder.encodeStruct(codec.Uint32, val.view_id);
    encoder.encodeStructPointer(geometry$.Rect, val.bounds);
    encoder.encodeMapPointer(codec.String, new codec.ArrayOf(codec.Uint8), val.properties);
    packed = 0;
    packed |= (val.visible & 1) << 0
    packed |= (val.drawn & 1) << 1
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(native_viewport$.ViewportMetrics, val.viewport_metrics);
  };

  function ViewManagerService_CreateView_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ViewManagerService_CreateView_Params.prototype.initDefaults_ = function() {
    this.view_id = 0;
  };
  ViewManagerService_CreateView_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ViewManagerService_CreateView_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, ViewManagerService_CreateView_Params.encodedSize, 1);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ViewManagerService_CreateView_Params.encodedSize = codec.kStructHeaderSize + 8;

  ViewManagerService_CreateView_Params.decode = function(decoder) {
    var packed;
    var val = new ViewManagerService_CreateView_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.view_id = decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ViewManagerService_CreateView_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ViewManagerService_CreateView_Params.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStruct(codec.Uint32, val.view_id);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function ViewManagerService_CreateView_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ViewManagerService_CreateView_ResponseParams.prototype.initDefaults_ = function() {
    this.error_code = 0;
  };
  ViewManagerService_CreateView_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ViewManagerService_CreateView_ResponseParams.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, ViewManagerService_CreateView_ResponseParams.encodedSize, 1);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ViewManagerService_CreateView_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ViewManagerService_CreateView_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ViewManagerService_CreateView_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.error_code = decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ViewManagerService_CreateView_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ViewManagerService_CreateView_ResponseParams.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStruct(codec.Int32, val.error_code);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function ViewManagerService_DeleteView_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ViewManagerService_DeleteView_Params.prototype.initDefaults_ = function() {
    this.view_id = 0;
  };
  ViewManagerService_DeleteView_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ViewManagerService_DeleteView_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, ViewManagerService_DeleteView_Params.encodedSize, 1);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ViewManagerService_DeleteView_Params.encodedSize = codec.kStructHeaderSize + 8;

  ViewManagerService_DeleteView_Params.decode = function(decoder) {
    var packed;
    var val = new ViewManagerService_DeleteView_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.view_id = decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ViewManagerService_DeleteView_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ViewManagerService_DeleteView_Params.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStruct(codec.Uint32, val.view_id);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function ViewManagerService_DeleteView_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ViewManagerService_DeleteView_ResponseParams.prototype.initDefaults_ = function() {
    this.success = false;
  };
  ViewManagerService_DeleteView_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ViewManagerService_DeleteView_ResponseParams.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, ViewManagerService_DeleteView_ResponseParams.encodedSize, 1);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ViewManagerService_DeleteView_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ViewManagerService_DeleteView_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ViewManagerService_DeleteView_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.success = decoder.decodeStruct(codec.Uint8);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ViewManagerService_DeleteView_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ViewManagerService_DeleteView_ResponseParams.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStruct(codec.Uint8, val.success);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function ViewManagerService_SetViewBounds_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ViewManagerService_SetViewBounds_Params.prototype.initDefaults_ = function() {
    this.view_id = 0;
    this.bounds = null;
  };
  ViewManagerService_SetViewBounds_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ViewManagerService_SetViewBounds_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, ViewManagerService_SetViewBounds_Params.encodedSize, 2);
    if (err !== validator.validationError.NONE)
        return err;
    // validate ViewManagerService_SetViewBounds_Params.bounds
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, geometry$.Rect, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ViewManagerService_SetViewBounds_Params.encodedSize = codec.kStructHeaderSize + 16;

  ViewManagerService_SetViewBounds_Params.decode = function(decoder) {
    var packed;
    var val = new ViewManagerService_SetViewBounds_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.view_id = decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.bounds = decoder.decodeStructPointer(geometry$.Rect);
    return val;
  };

  ViewManagerService_SetViewBounds_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ViewManagerService_SetViewBounds_Params.encodedSize);
    encoder.writeUint32(2);
    encoder.encodeStruct(codec.Uint32, val.view_id);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(geometry$.Rect, val.bounds);
  };

  function ViewManagerService_SetViewBounds_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ViewManagerService_SetViewBounds_ResponseParams.prototype.initDefaults_ = function() {
    this.success = false;
  };
  ViewManagerService_SetViewBounds_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ViewManagerService_SetViewBounds_ResponseParams.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, ViewManagerService_SetViewBounds_ResponseParams.encodedSize, 1);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ViewManagerService_SetViewBounds_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ViewManagerService_SetViewBounds_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ViewManagerService_SetViewBounds_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.success = decoder.decodeStruct(codec.Uint8);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ViewManagerService_SetViewBounds_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ViewManagerService_SetViewBounds_ResponseParams.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStruct(codec.Uint8, val.success);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function ViewManagerService_SetViewVisibility_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ViewManagerService_SetViewVisibility_Params.prototype.initDefaults_ = function() {
    this.view_id = 0;
    this.visible = false;
  };
  ViewManagerService_SetViewVisibility_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ViewManagerService_SetViewVisibility_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, ViewManagerService_SetViewVisibility_Params.encodedSize, 2);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ViewManagerService_SetViewVisibility_Params.encodedSize = codec.kStructHeaderSize + 8;

  ViewManagerService_SetViewVisibility_Params.decode = function(decoder) {
    var packed;
    var val = new ViewManagerService_SetViewVisibility_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.view_id = decoder.decodeStruct(codec.Uint32);
    val.visible = decoder.decodeStruct(codec.Uint8);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ViewManagerService_SetViewVisibility_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ViewManagerService_SetViewVisibility_Params.encodedSize);
    encoder.writeUint32(2);
    encoder.encodeStruct(codec.Uint32, val.view_id);
    encoder.encodeStruct(codec.Uint8, val.visible);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function ViewManagerService_SetViewVisibility_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ViewManagerService_SetViewVisibility_ResponseParams.prototype.initDefaults_ = function() {
    this.success = false;
  };
  ViewManagerService_SetViewVisibility_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ViewManagerService_SetViewVisibility_ResponseParams.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, ViewManagerService_SetViewVisibility_ResponseParams.encodedSize, 1);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ViewManagerService_SetViewVisibility_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ViewManagerService_SetViewVisibility_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ViewManagerService_SetViewVisibility_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.success = decoder.decodeStruct(codec.Uint8);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ViewManagerService_SetViewVisibility_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ViewManagerService_SetViewVisibility_ResponseParams.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStruct(codec.Uint8, val.success);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function ViewManagerService_SetViewProperty_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ViewManagerService_SetViewProperty_Params.prototype.initDefaults_ = function() {
    this.view_id = 0;
    this.name = null;
    this.value = null;
  };
  ViewManagerService_SetViewProperty_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ViewManagerService_SetViewProperty_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, ViewManagerService_SetViewProperty_Params.encodedSize, 3);
    if (err !== validator.validationError.NONE)
        return err;
    // validate ViewManagerService_SetViewProperty_Params.name
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;
    // validate ViewManagerService_SetViewProperty_Params.value
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 16, 1, codec.Uint8, true, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ViewManagerService_SetViewProperty_Params.encodedSize = codec.kStructHeaderSize + 24;

  ViewManagerService_SetViewProperty_Params.decode = function(decoder) {
    var packed;
    var val = new ViewManagerService_SetViewProperty_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.view_id = decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.name = decoder.decodeStruct(codec.String);
    val.value = decoder.decodeArrayPointer(codec.Uint8);
    return val;
  };

  ViewManagerService_SetViewProperty_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ViewManagerService_SetViewProperty_Params.encodedSize);
    encoder.writeUint32(3);
    encoder.encodeStruct(codec.Uint32, val.view_id);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.String, val.name);
    encoder.encodeArrayPointer(codec.Uint8, val.value);
  };

  function ViewManagerService_SetViewProperty_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ViewManagerService_SetViewProperty_ResponseParams.prototype.initDefaults_ = function() {
    this.success = false;
  };
  ViewManagerService_SetViewProperty_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ViewManagerService_SetViewProperty_ResponseParams.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, ViewManagerService_SetViewProperty_ResponseParams.encodedSize, 1);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ViewManagerService_SetViewProperty_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ViewManagerService_SetViewProperty_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ViewManagerService_SetViewProperty_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.success = decoder.decodeStruct(codec.Uint8);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ViewManagerService_SetViewProperty_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ViewManagerService_SetViewProperty_ResponseParams.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStruct(codec.Uint8, val.success);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function ViewManagerService_AddView_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ViewManagerService_AddView_Params.prototype.initDefaults_ = function() {
    this.parent = 0;
    this.child = 0;
  };
  ViewManagerService_AddView_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ViewManagerService_AddView_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, ViewManagerService_AddView_Params.encodedSize, 2);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ViewManagerService_AddView_Params.encodedSize = codec.kStructHeaderSize + 8;

  ViewManagerService_AddView_Params.decode = function(decoder) {
    var packed;
    var val = new ViewManagerService_AddView_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.parent = decoder.decodeStruct(codec.Uint32);
    val.child = decoder.decodeStruct(codec.Uint32);
    return val;
  };

  ViewManagerService_AddView_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ViewManagerService_AddView_Params.encodedSize);
    encoder.writeUint32(2);
    encoder.encodeStruct(codec.Uint32, val.parent);
    encoder.encodeStruct(codec.Uint32, val.child);
  };

  function ViewManagerService_AddView_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ViewManagerService_AddView_ResponseParams.prototype.initDefaults_ = function() {
    this.success = false;
  };
  ViewManagerService_AddView_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ViewManagerService_AddView_ResponseParams.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, ViewManagerService_AddView_ResponseParams.encodedSize, 1);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ViewManagerService_AddView_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ViewManagerService_AddView_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ViewManagerService_AddView_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.success = decoder.decodeStruct(codec.Uint8);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ViewManagerService_AddView_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ViewManagerService_AddView_ResponseParams.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStruct(codec.Uint8, val.success);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function ViewManagerService_RemoveViewFromParent_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ViewManagerService_RemoveViewFromParent_Params.prototype.initDefaults_ = function() {
    this.view_id = 0;
  };
  ViewManagerService_RemoveViewFromParent_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ViewManagerService_RemoveViewFromParent_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, ViewManagerService_RemoveViewFromParent_Params.encodedSize, 1);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ViewManagerService_RemoveViewFromParent_Params.encodedSize = codec.kStructHeaderSize + 8;

  ViewManagerService_RemoveViewFromParent_Params.decode = function(decoder) {
    var packed;
    var val = new ViewManagerService_RemoveViewFromParent_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.view_id = decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ViewManagerService_RemoveViewFromParent_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ViewManagerService_RemoveViewFromParent_Params.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStruct(codec.Uint32, val.view_id);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function ViewManagerService_RemoveViewFromParent_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ViewManagerService_RemoveViewFromParent_ResponseParams.prototype.initDefaults_ = function() {
    this.success = false;
  };
  ViewManagerService_RemoveViewFromParent_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ViewManagerService_RemoveViewFromParent_ResponseParams.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, ViewManagerService_RemoveViewFromParent_ResponseParams.encodedSize, 1);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ViewManagerService_RemoveViewFromParent_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ViewManagerService_RemoveViewFromParent_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ViewManagerService_RemoveViewFromParent_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.success = decoder.decodeStruct(codec.Uint8);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ViewManagerService_RemoveViewFromParent_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ViewManagerService_RemoveViewFromParent_ResponseParams.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStruct(codec.Uint8, val.success);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function ViewManagerService_ReorderView_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ViewManagerService_ReorderView_Params.prototype.initDefaults_ = function() {
    this.view_id = 0;
    this.relative_view_id = 0;
    this.direction = 0;
  };
  ViewManagerService_ReorderView_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ViewManagerService_ReorderView_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, ViewManagerService_ReorderView_Params.encodedSize, 3);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ViewManagerService_ReorderView_Params.encodedSize = codec.kStructHeaderSize + 16;

  ViewManagerService_ReorderView_Params.decode = function(decoder) {
    var packed;
    var val = new ViewManagerService_ReorderView_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.view_id = decoder.decodeStruct(codec.Uint32);
    val.relative_view_id = decoder.decodeStruct(codec.Uint32);
    val.direction = decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ViewManagerService_ReorderView_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ViewManagerService_ReorderView_Params.encodedSize);
    encoder.writeUint32(3);
    encoder.encodeStruct(codec.Uint32, val.view_id);
    encoder.encodeStruct(codec.Uint32, val.relative_view_id);
    encoder.encodeStruct(codec.Int32, val.direction);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function ViewManagerService_ReorderView_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ViewManagerService_ReorderView_ResponseParams.prototype.initDefaults_ = function() {
    this.success = false;
  };
  ViewManagerService_ReorderView_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ViewManagerService_ReorderView_ResponseParams.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, ViewManagerService_ReorderView_ResponseParams.encodedSize, 1);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ViewManagerService_ReorderView_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ViewManagerService_ReorderView_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ViewManagerService_ReorderView_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.success = decoder.decodeStruct(codec.Uint8);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ViewManagerService_ReorderView_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ViewManagerService_ReorderView_ResponseParams.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStruct(codec.Uint8, val.success);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function ViewManagerService_GetViewTree_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ViewManagerService_GetViewTree_Params.prototype.initDefaults_ = function() {
    this.view_id = 0;
  };
  ViewManagerService_GetViewTree_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ViewManagerService_GetViewTree_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, ViewManagerService_GetViewTree_Params.encodedSize, 1);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ViewManagerService_GetViewTree_Params.encodedSize = codec.kStructHeaderSize + 8;

  ViewManagerService_GetViewTree_Params.decode = function(decoder) {
    var packed;
    var val = new ViewManagerService_GetViewTree_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.view_id = decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ViewManagerService_GetViewTree_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ViewManagerService_GetViewTree_Params.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStruct(codec.Uint32, val.view_id);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function ViewManagerService_GetViewTree_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ViewManagerService_GetViewTree_ResponseParams.prototype.initDefaults_ = function() {
    this.views = null;
  };
  ViewManagerService_GetViewTree_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ViewManagerService_GetViewTree_ResponseParams.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, ViewManagerService_GetViewTree_ResponseParams.encodedSize, 1);
    if (err !== validator.validationError.NONE)
        return err;
    // validate ViewManagerService_GetViewTree_ResponseParams.views
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(ViewData), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ViewManagerService_GetViewTree_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ViewManagerService_GetViewTree_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ViewManagerService_GetViewTree_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.views = decoder.decodeArrayPointer(new codec.PointerTo(ViewData));
    return val;
  };

  ViewManagerService_GetViewTree_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ViewManagerService_GetViewTree_ResponseParams.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeArrayPointer(new codec.PointerTo(ViewData), val.views);
  };

  function ViewManagerService_SetViewSurfaceId_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ViewManagerService_SetViewSurfaceId_Params.prototype.initDefaults_ = function() {
    this.view_id = 0;
    this.surface_id = null;
  };
  ViewManagerService_SetViewSurfaceId_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ViewManagerService_SetViewSurfaceId_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, ViewManagerService_SetViewSurfaceId_Params.encodedSize, 2);
    if (err !== validator.validationError.NONE)
        return err;
    // validate ViewManagerService_SetViewSurfaceId_Params.surface_id
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, surface_id$.SurfaceId, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ViewManagerService_SetViewSurfaceId_Params.encodedSize = codec.kStructHeaderSize + 16;

  ViewManagerService_SetViewSurfaceId_Params.decode = function(decoder) {
    var packed;
    var val = new ViewManagerService_SetViewSurfaceId_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.view_id = decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.surface_id = decoder.decodeStructPointer(surface_id$.SurfaceId);
    return val;
  };

  ViewManagerService_SetViewSurfaceId_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ViewManagerService_SetViewSurfaceId_Params.encodedSize);
    encoder.writeUint32(2);
    encoder.encodeStruct(codec.Uint32, val.view_id);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(surface_id$.SurfaceId, val.surface_id);
  };

  function ViewManagerService_SetViewSurfaceId_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ViewManagerService_SetViewSurfaceId_ResponseParams.prototype.initDefaults_ = function() {
    this.success = false;
  };
  ViewManagerService_SetViewSurfaceId_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ViewManagerService_SetViewSurfaceId_ResponseParams.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, ViewManagerService_SetViewSurfaceId_ResponseParams.encodedSize, 1);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ViewManagerService_SetViewSurfaceId_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ViewManagerService_SetViewSurfaceId_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ViewManagerService_SetViewSurfaceId_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.success = decoder.decodeStruct(codec.Uint8);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ViewManagerService_SetViewSurfaceId_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ViewManagerService_SetViewSurfaceId_ResponseParams.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStruct(codec.Uint8, val.success);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function ViewManagerService_EmbedUrl_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ViewManagerService_EmbedUrl_Params.prototype.initDefaults_ = function() {
    this.url = null;
    this.view_id = 0;
    this.services = null;
    this.exposed_services = null;
  };
  ViewManagerService_EmbedUrl_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ViewManagerService_EmbedUrl_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, ViewManagerService_EmbedUrl_Params.encodedSize, 4);
    if (err !== validator.validationError.NONE)
        return err;
    // validate ViewManagerService_EmbedUrl_Params.url
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;
    // validate ViewManagerService_EmbedUrl_Params.services
    err = messageValidator.validateHandle(offset + codec.kStructHeaderSize + 12, true)
    if (err !== validator.validationError.NONE)
        return err;
    // validate ViewManagerService_EmbedUrl_Params.exposed_services
    err = messageValidator.validateHandle(offset + codec.kStructHeaderSize + 16, true)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ViewManagerService_EmbedUrl_Params.encodedSize = codec.kStructHeaderSize + 24;

  ViewManagerService_EmbedUrl_Params.decode = function(decoder) {
    var packed;
    var val = new ViewManagerService_EmbedUrl_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.url = decoder.decodeStruct(codec.String);
    val.view_id = decoder.decodeStruct(codec.Uint32);
    val.services = decoder.decodeStruct(codec.Handle);
    val.exposed_services = decoder.decodeStruct(codec.Handle);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ViewManagerService_EmbedUrl_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ViewManagerService_EmbedUrl_Params.encodedSize);
    encoder.writeUint32(4);
    encoder.encodeStruct(codec.String, val.url);
    encoder.encodeStruct(codec.Uint32, val.view_id);
    encoder.encodeStruct(codec.Handle, val.services);
    encoder.encodeStruct(codec.Handle, val.exposed_services);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function ViewManagerService_EmbedUrl_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ViewManagerService_EmbedUrl_ResponseParams.prototype.initDefaults_ = function() {
    this.success = false;
  };
  ViewManagerService_EmbedUrl_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ViewManagerService_EmbedUrl_ResponseParams.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, ViewManagerService_EmbedUrl_ResponseParams.encodedSize, 1);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ViewManagerService_EmbedUrl_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ViewManagerService_EmbedUrl_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ViewManagerService_EmbedUrl_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.success = decoder.decodeStruct(codec.Uint8);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ViewManagerService_EmbedUrl_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ViewManagerService_EmbedUrl_ResponseParams.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStruct(codec.Uint8, val.success);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function ViewManagerService_Embed_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ViewManagerService_Embed_Params.prototype.initDefaults_ = function() {
    this.view_id = 0;
    this.client = null;
  };
  ViewManagerService_Embed_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ViewManagerService_Embed_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, ViewManagerService_Embed_Params.encodedSize, 2);
    if (err !== validator.validationError.NONE)
        return err;
    // validate ViewManagerService_Embed_Params.client
    err = messageValidator.validateHandle(offset + codec.kStructHeaderSize + 4, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ViewManagerService_Embed_Params.encodedSize = codec.kStructHeaderSize + 8;

  ViewManagerService_Embed_Params.decode = function(decoder) {
    var packed;
    var val = new ViewManagerService_Embed_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.view_id = decoder.decodeStruct(codec.Uint32);
    val.client = decoder.decodeStruct(codec.Handle);
    return val;
  };

  ViewManagerService_Embed_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ViewManagerService_Embed_Params.encodedSize);
    encoder.writeUint32(2);
    encoder.encodeStruct(codec.Uint32, val.view_id);
    encoder.encodeStruct(codec.Handle, val.client);
  };

  function ViewManagerService_Embed_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ViewManagerService_Embed_ResponseParams.prototype.initDefaults_ = function() {
    this.success = false;
  };
  ViewManagerService_Embed_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ViewManagerService_Embed_ResponseParams.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, ViewManagerService_Embed_ResponseParams.encodedSize, 1);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ViewManagerService_Embed_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ViewManagerService_Embed_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ViewManagerService_Embed_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.success = decoder.decodeStruct(codec.Uint8);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ViewManagerService_Embed_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ViewManagerService_Embed_ResponseParams.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStruct(codec.Uint8, val.success);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function ViewManagerClient_OnEmbed_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ViewManagerClient_OnEmbed_Params.prototype.initDefaults_ = function() {
    this.connection_id = 0;
    this.view_manager_service = null;
    this.embedder_url = null;
    this.root = null;
    this.services = null;
    this.exposed_services = null;
    this.window_manager_pipe = null;
  };
  ViewManagerClient_OnEmbed_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ViewManagerClient_OnEmbed_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, ViewManagerClient_OnEmbed_Params.encodedSize, 7);
    if (err !== validator.validationError.NONE)
        return err;
    // validate ViewManagerClient_OnEmbed_Params.view_manager_service
    err = messageValidator.validateHandle(offset + codec.kStructHeaderSize + 4, true)
    if (err !== validator.validationError.NONE)
        return err;
    // validate ViewManagerClient_OnEmbed_Params.embedder_url
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;
    // validate ViewManagerClient_OnEmbed_Params.root
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, ViewData, false);
    if (err !== validator.validationError.NONE)
        return err;
    // validate ViewManagerClient_OnEmbed_Params.services
    err = messageValidator.validateHandle(offset + codec.kStructHeaderSize + 24, true)
    if (err !== validator.validationError.NONE)
        return err;
    // validate ViewManagerClient_OnEmbed_Params.exposed_services
    err = messageValidator.validateHandle(offset + codec.kStructHeaderSize + 28, true)
    if (err !== validator.validationError.NONE)
        return err;
    // validate ViewManagerClient_OnEmbed_Params.window_manager_pipe
    err = messageValidator.validateHandle(offset + codec.kStructHeaderSize + 32, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ViewManagerClient_OnEmbed_Params.encodedSize = codec.kStructHeaderSize + 40;

  ViewManagerClient_OnEmbed_Params.decode = function(decoder) {
    var packed;
    var val = new ViewManagerClient_OnEmbed_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.connection_id = decoder.decodeStruct(codec.Uint16);
    decoder.skip(1);
    decoder.skip(1);
    val.view_manager_service = decoder.decodeStruct(codec.Handle);
    val.embedder_url = decoder.decodeStruct(codec.String);
    val.root = decoder.decodeStructPointer(ViewData);
    val.services = decoder.decodeStruct(codec.Handle);
    val.exposed_services = decoder.decodeStruct(codec.Handle);
    val.window_manager_pipe = decoder.decodeStruct(codec.Handle);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ViewManagerClient_OnEmbed_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ViewManagerClient_OnEmbed_Params.encodedSize);
    encoder.writeUint32(7);
    encoder.encodeStruct(codec.Uint16, val.connection_id);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Handle, val.view_manager_service);
    encoder.encodeStruct(codec.String, val.embedder_url);
    encoder.encodeStructPointer(ViewData, val.root);
    encoder.encodeStruct(codec.Handle, val.services);
    encoder.encodeStruct(codec.Handle, val.exposed_services);
    encoder.encodeStruct(codec.Handle, val.window_manager_pipe);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function ViewManagerClient_OnEmbeddedAppDisconnected_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ViewManagerClient_OnEmbeddedAppDisconnected_Params.prototype.initDefaults_ = function() {
    this.view = 0;
  };
  ViewManagerClient_OnEmbeddedAppDisconnected_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ViewManagerClient_OnEmbeddedAppDisconnected_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, ViewManagerClient_OnEmbeddedAppDisconnected_Params.encodedSize, 1);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ViewManagerClient_OnEmbeddedAppDisconnected_Params.encodedSize = codec.kStructHeaderSize + 8;

  ViewManagerClient_OnEmbeddedAppDisconnected_Params.decode = function(decoder) {
    var packed;
    var val = new ViewManagerClient_OnEmbeddedAppDisconnected_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.view = decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ViewManagerClient_OnEmbeddedAppDisconnected_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ViewManagerClient_OnEmbeddedAppDisconnected_Params.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStruct(codec.Uint32, val.view);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function ViewManagerClient_OnViewBoundsChanged_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ViewManagerClient_OnViewBoundsChanged_Params.prototype.initDefaults_ = function() {
    this.view = 0;
    this.old_bounds = null;
    this.new_bounds = null;
  };
  ViewManagerClient_OnViewBoundsChanged_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ViewManagerClient_OnViewBoundsChanged_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, ViewManagerClient_OnViewBoundsChanged_Params.encodedSize, 3);
    if (err !== validator.validationError.NONE)
        return err;
    // validate ViewManagerClient_OnViewBoundsChanged_Params.old_bounds
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, geometry$.Rect, false);
    if (err !== validator.validationError.NONE)
        return err;
    // validate ViewManagerClient_OnViewBoundsChanged_Params.new_bounds
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, geometry$.Rect, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ViewManagerClient_OnViewBoundsChanged_Params.encodedSize = codec.kStructHeaderSize + 24;

  ViewManagerClient_OnViewBoundsChanged_Params.decode = function(decoder) {
    var packed;
    var val = new ViewManagerClient_OnViewBoundsChanged_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.view = decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.old_bounds = decoder.decodeStructPointer(geometry$.Rect);
    val.new_bounds = decoder.decodeStructPointer(geometry$.Rect);
    return val;
  };

  ViewManagerClient_OnViewBoundsChanged_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ViewManagerClient_OnViewBoundsChanged_Params.encodedSize);
    encoder.writeUint32(3);
    encoder.encodeStruct(codec.Uint32, val.view);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(geometry$.Rect, val.old_bounds);
    encoder.encodeStructPointer(geometry$.Rect, val.new_bounds);
  };

  function ViewManagerClient_OnViewViewportMetricsChanged_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ViewManagerClient_OnViewViewportMetricsChanged_Params.prototype.initDefaults_ = function() {
    this.old_metrics = null;
    this.new_metrics = null;
  };
  ViewManagerClient_OnViewViewportMetricsChanged_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ViewManagerClient_OnViewViewportMetricsChanged_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, ViewManagerClient_OnViewViewportMetricsChanged_Params.encodedSize, 2);
    if (err !== validator.validationError.NONE)
        return err;
    // validate ViewManagerClient_OnViewViewportMetricsChanged_Params.old_metrics
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, native_viewport$.ViewportMetrics, false);
    if (err !== validator.validationError.NONE)
        return err;
    // validate ViewManagerClient_OnViewViewportMetricsChanged_Params.new_metrics
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, native_viewport$.ViewportMetrics, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ViewManagerClient_OnViewViewportMetricsChanged_Params.encodedSize = codec.kStructHeaderSize + 16;

  ViewManagerClient_OnViewViewportMetricsChanged_Params.decode = function(decoder) {
    var packed;
    var val = new ViewManagerClient_OnViewViewportMetricsChanged_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.old_metrics = decoder.decodeStructPointer(native_viewport$.ViewportMetrics);
    val.new_metrics = decoder.decodeStructPointer(native_viewport$.ViewportMetrics);
    return val;
  };

  ViewManagerClient_OnViewViewportMetricsChanged_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ViewManagerClient_OnViewViewportMetricsChanged_Params.encodedSize);
    encoder.writeUint32(2);
    encoder.encodeStructPointer(native_viewport$.ViewportMetrics, val.old_metrics);
    encoder.encodeStructPointer(native_viewport$.ViewportMetrics, val.new_metrics);
  };

  function ViewManagerClient_OnViewHierarchyChanged_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ViewManagerClient_OnViewHierarchyChanged_Params.prototype.initDefaults_ = function() {
    this.view = 0;
    this.new_parent = 0;
    this.old_parent = 0;
    this.views = null;
  };
  ViewManagerClient_OnViewHierarchyChanged_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ViewManagerClient_OnViewHierarchyChanged_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, ViewManagerClient_OnViewHierarchyChanged_Params.encodedSize, 4);
    if (err !== validator.validationError.NONE)
        return err;
    // validate ViewManagerClient_OnViewHierarchyChanged_Params.views
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 16, 8, new codec.PointerTo(ViewData), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ViewManagerClient_OnViewHierarchyChanged_Params.encodedSize = codec.kStructHeaderSize + 24;

  ViewManagerClient_OnViewHierarchyChanged_Params.decode = function(decoder) {
    var packed;
    var val = new ViewManagerClient_OnViewHierarchyChanged_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.view = decoder.decodeStruct(codec.Uint32);
    val.new_parent = decoder.decodeStruct(codec.Uint32);
    val.old_parent = decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.views = decoder.decodeArrayPointer(new codec.PointerTo(ViewData));
    return val;
  };

  ViewManagerClient_OnViewHierarchyChanged_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ViewManagerClient_OnViewHierarchyChanged_Params.encodedSize);
    encoder.writeUint32(4);
    encoder.encodeStruct(codec.Uint32, val.view);
    encoder.encodeStruct(codec.Uint32, val.new_parent);
    encoder.encodeStruct(codec.Uint32, val.old_parent);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeArrayPointer(new codec.PointerTo(ViewData), val.views);
  };

  function ViewManagerClient_OnViewReordered_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ViewManagerClient_OnViewReordered_Params.prototype.initDefaults_ = function() {
    this.view_id = 0;
    this.relative_view_id = 0;
    this.direction = 0;
  };
  ViewManagerClient_OnViewReordered_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ViewManagerClient_OnViewReordered_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, ViewManagerClient_OnViewReordered_Params.encodedSize, 3);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ViewManagerClient_OnViewReordered_Params.encodedSize = codec.kStructHeaderSize + 16;

  ViewManagerClient_OnViewReordered_Params.decode = function(decoder) {
    var packed;
    var val = new ViewManagerClient_OnViewReordered_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.view_id = decoder.decodeStruct(codec.Uint32);
    val.relative_view_id = decoder.decodeStruct(codec.Uint32);
    val.direction = decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ViewManagerClient_OnViewReordered_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ViewManagerClient_OnViewReordered_Params.encodedSize);
    encoder.writeUint32(3);
    encoder.encodeStruct(codec.Uint32, val.view_id);
    encoder.encodeStruct(codec.Uint32, val.relative_view_id);
    encoder.encodeStruct(codec.Int32, val.direction);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function ViewManagerClient_OnViewDeleted_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ViewManagerClient_OnViewDeleted_Params.prototype.initDefaults_ = function() {
    this.view = 0;
  };
  ViewManagerClient_OnViewDeleted_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ViewManagerClient_OnViewDeleted_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, ViewManagerClient_OnViewDeleted_Params.encodedSize, 1);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ViewManagerClient_OnViewDeleted_Params.encodedSize = codec.kStructHeaderSize + 8;

  ViewManagerClient_OnViewDeleted_Params.decode = function(decoder) {
    var packed;
    var val = new ViewManagerClient_OnViewDeleted_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.view = decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ViewManagerClient_OnViewDeleted_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ViewManagerClient_OnViewDeleted_Params.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStruct(codec.Uint32, val.view);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function ViewManagerClient_OnViewVisibilityChanged_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ViewManagerClient_OnViewVisibilityChanged_Params.prototype.initDefaults_ = function() {
    this.view = 0;
    this.visible = false;
  };
  ViewManagerClient_OnViewVisibilityChanged_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ViewManagerClient_OnViewVisibilityChanged_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, ViewManagerClient_OnViewVisibilityChanged_Params.encodedSize, 2);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ViewManagerClient_OnViewVisibilityChanged_Params.encodedSize = codec.kStructHeaderSize + 8;

  ViewManagerClient_OnViewVisibilityChanged_Params.decode = function(decoder) {
    var packed;
    var val = new ViewManagerClient_OnViewVisibilityChanged_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.view = decoder.decodeStruct(codec.Uint32);
    val.visible = decoder.decodeStruct(codec.Uint8);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ViewManagerClient_OnViewVisibilityChanged_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ViewManagerClient_OnViewVisibilityChanged_Params.encodedSize);
    encoder.writeUint32(2);
    encoder.encodeStruct(codec.Uint32, val.view);
    encoder.encodeStruct(codec.Uint8, val.visible);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function ViewManagerClient_OnViewDrawnStateChanged_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ViewManagerClient_OnViewDrawnStateChanged_Params.prototype.initDefaults_ = function() {
    this.view = 0;
    this.drawn = false;
  };
  ViewManagerClient_OnViewDrawnStateChanged_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ViewManagerClient_OnViewDrawnStateChanged_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, ViewManagerClient_OnViewDrawnStateChanged_Params.encodedSize, 2);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ViewManagerClient_OnViewDrawnStateChanged_Params.encodedSize = codec.kStructHeaderSize + 8;

  ViewManagerClient_OnViewDrawnStateChanged_Params.decode = function(decoder) {
    var packed;
    var val = new ViewManagerClient_OnViewDrawnStateChanged_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.view = decoder.decodeStruct(codec.Uint32);
    val.drawn = decoder.decodeStruct(codec.Uint8);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ViewManagerClient_OnViewDrawnStateChanged_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ViewManagerClient_OnViewDrawnStateChanged_Params.encodedSize);
    encoder.writeUint32(2);
    encoder.encodeStruct(codec.Uint32, val.view);
    encoder.encodeStruct(codec.Uint8, val.drawn);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function ViewManagerClient_OnViewSharedPropertyChanged_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ViewManagerClient_OnViewSharedPropertyChanged_Params.prototype.initDefaults_ = function() {
    this.view = 0;
    this.name = null;
    this.new_data = null;
  };
  ViewManagerClient_OnViewSharedPropertyChanged_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ViewManagerClient_OnViewSharedPropertyChanged_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, ViewManagerClient_OnViewSharedPropertyChanged_Params.encodedSize, 3);
    if (err !== validator.validationError.NONE)
        return err;
    // validate ViewManagerClient_OnViewSharedPropertyChanged_Params.name
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;
    // validate ViewManagerClient_OnViewSharedPropertyChanged_Params.new_data
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 16, 1, codec.Uint8, true, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ViewManagerClient_OnViewSharedPropertyChanged_Params.encodedSize = codec.kStructHeaderSize + 24;

  ViewManagerClient_OnViewSharedPropertyChanged_Params.decode = function(decoder) {
    var packed;
    var val = new ViewManagerClient_OnViewSharedPropertyChanged_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.view = decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.name = decoder.decodeStruct(codec.String);
    val.new_data = decoder.decodeArrayPointer(codec.Uint8);
    return val;
  };

  ViewManagerClient_OnViewSharedPropertyChanged_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ViewManagerClient_OnViewSharedPropertyChanged_Params.encodedSize);
    encoder.writeUint32(3);
    encoder.encodeStruct(codec.Uint32, val.view);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.String, val.name);
    encoder.encodeArrayPointer(codec.Uint8, val.new_data);
  };

  function ViewManagerClient_OnViewInputEvent_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ViewManagerClient_OnViewInputEvent_Params.prototype.initDefaults_ = function() {
    this.view = 0;
    this.event = null;
  };
  ViewManagerClient_OnViewInputEvent_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ViewManagerClient_OnViewInputEvent_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, ViewManagerClient_OnViewInputEvent_Params.encodedSize, 2);
    if (err !== validator.validationError.NONE)
        return err;
    // validate ViewManagerClient_OnViewInputEvent_Params.event
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, input_events$.Event, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ViewManagerClient_OnViewInputEvent_Params.encodedSize = codec.kStructHeaderSize + 16;

  ViewManagerClient_OnViewInputEvent_Params.decode = function(decoder) {
    var packed;
    var val = new ViewManagerClient_OnViewInputEvent_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.view = decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.event = decoder.decodeStructPointer(input_events$.Event);
    return val;
  };

  ViewManagerClient_OnViewInputEvent_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ViewManagerClient_OnViewInputEvent_Params.encodedSize);
    encoder.writeUint32(2);
    encoder.encodeStruct(codec.Uint32, val.view);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(input_events$.Event, val.event);
  };

  function ViewManagerClient_OnViewInputEvent_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ViewManagerClient_OnViewInputEvent_ResponseParams.prototype.initDefaults_ = function() {
  };
  ViewManagerClient_OnViewInputEvent_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ViewManagerClient_OnViewInputEvent_ResponseParams.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, ViewManagerClient_OnViewInputEvent_ResponseParams.encodedSize, 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ViewManagerClient_OnViewInputEvent_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  ViewManagerClient_OnViewInputEvent_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ViewManagerClient_OnViewInputEvent_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  ViewManagerClient_OnViewInputEvent_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ViewManagerClient_OnViewInputEvent_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };

  var kViewManagerService_CreateView_Name = 0;
  var kViewManagerService_DeleteView_Name = 1;
  var kViewManagerService_SetViewBounds_Name = 2;
  var kViewManagerService_SetViewVisibility_Name = 3;
  var kViewManagerService_SetViewProperty_Name = 4;
  var kViewManagerService_AddView_Name = 5;
  var kViewManagerService_RemoveViewFromParent_Name = 6;
  var kViewManagerService_ReorderView_Name = 7;
  var kViewManagerService_GetViewTree_Name = 8;
  var kViewManagerService_SetViewSurfaceId_Name = 9;
  var kViewManagerService_EmbedUrl_Name = 10;
  var kViewManagerService_Embed_Name = 11;

  function ViewManagerServiceProxy(receiver) {
    bindings.ProxyBase.call(this, receiver);
  }
  ViewManagerServiceProxy.prototype = Object.create(bindings.ProxyBase.prototype);
  ViewManagerServiceProxy.prototype.createView = function(view_id) {
    var params = new ViewManagerService_CreateView_Params();
    params.view_id = view_id;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageWithRequestIDBuilder(
          kViewManagerService_CreateView_Name,
          codec.align(ViewManagerService_CreateView_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ViewManagerService_CreateView_Params, params);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ViewManagerService_CreateView_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ViewManagerServiceProxy.prototype.deleteView = function(view_id) {
    var params = new ViewManagerService_DeleteView_Params();
    params.view_id = view_id;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageWithRequestIDBuilder(
          kViewManagerService_DeleteView_Name,
          codec.align(ViewManagerService_DeleteView_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ViewManagerService_DeleteView_Params, params);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ViewManagerService_DeleteView_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ViewManagerServiceProxy.prototype.setViewBounds = function(view_id, bounds) {
    var params = new ViewManagerService_SetViewBounds_Params();
    params.view_id = view_id;
    params.bounds = bounds;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageWithRequestIDBuilder(
          kViewManagerService_SetViewBounds_Name,
          codec.align(ViewManagerService_SetViewBounds_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ViewManagerService_SetViewBounds_Params, params);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ViewManagerService_SetViewBounds_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ViewManagerServiceProxy.prototype.setViewVisibility = function(view_id, visible) {
    var params = new ViewManagerService_SetViewVisibility_Params();
    params.view_id = view_id;
    params.visible = visible;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageWithRequestIDBuilder(
          kViewManagerService_SetViewVisibility_Name,
          codec.align(ViewManagerService_SetViewVisibility_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ViewManagerService_SetViewVisibility_Params, params);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ViewManagerService_SetViewVisibility_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ViewManagerServiceProxy.prototype.setViewProperty = function(view_id, name, value) {
    var params = new ViewManagerService_SetViewProperty_Params();
    params.view_id = view_id;
    params.name = name;
    params.value = value;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageWithRequestIDBuilder(
          kViewManagerService_SetViewProperty_Name,
          codec.align(ViewManagerService_SetViewProperty_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ViewManagerService_SetViewProperty_Params, params);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ViewManagerService_SetViewProperty_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ViewManagerServiceProxy.prototype.addView = function(parent, child) {
    var params = new ViewManagerService_AddView_Params();
    params.parent = parent;
    params.child = child;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageWithRequestIDBuilder(
          kViewManagerService_AddView_Name,
          codec.align(ViewManagerService_AddView_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ViewManagerService_AddView_Params, params);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ViewManagerService_AddView_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ViewManagerServiceProxy.prototype.removeViewFromParent = function(view_id) {
    var params = new ViewManagerService_RemoveViewFromParent_Params();
    params.view_id = view_id;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageWithRequestIDBuilder(
          kViewManagerService_RemoveViewFromParent_Name,
          codec.align(ViewManagerService_RemoveViewFromParent_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ViewManagerService_RemoveViewFromParent_Params, params);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ViewManagerService_RemoveViewFromParent_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ViewManagerServiceProxy.prototype.reorderView = function(view_id, relative_view_id, direction) {
    var params = new ViewManagerService_ReorderView_Params();
    params.view_id = view_id;
    params.relative_view_id = relative_view_id;
    params.direction = direction;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageWithRequestIDBuilder(
          kViewManagerService_ReorderView_Name,
          codec.align(ViewManagerService_ReorderView_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ViewManagerService_ReorderView_Params, params);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ViewManagerService_ReorderView_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ViewManagerServiceProxy.prototype.getViewTree = function(view_id) {
    var params = new ViewManagerService_GetViewTree_Params();
    params.view_id = view_id;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageWithRequestIDBuilder(
          kViewManagerService_GetViewTree_Name,
          codec.align(ViewManagerService_GetViewTree_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ViewManagerService_GetViewTree_Params, params);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ViewManagerService_GetViewTree_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ViewManagerServiceProxy.prototype.setViewSurfaceId = function(view_id, surface_id) {
    var params = new ViewManagerService_SetViewSurfaceId_Params();
    params.view_id = view_id;
    params.surface_id = surface_id;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageWithRequestIDBuilder(
          kViewManagerService_SetViewSurfaceId_Name,
          codec.align(ViewManagerService_SetViewSurfaceId_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ViewManagerService_SetViewSurfaceId_Params, params);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ViewManagerService_SetViewSurfaceId_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ViewManagerServiceProxy.prototype.embedUrl = function(url, view_id, services, exposed_services) {
    var params = new ViewManagerService_EmbedUrl_Params();
    params.url = url;
    params.view_id = view_id;
    params.services = core.isHandle(services) ? services : connection.bindProxy(services, service_provider$.ServiceProvider);
    params.exposed_services = core.isHandle(exposed_services) ? exposed_services : connection.bindImpl(exposed_services, service_provider$.ServiceProvider);
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageWithRequestIDBuilder(
          kViewManagerService_EmbedUrl_Name,
          codec.align(ViewManagerService_EmbedUrl_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ViewManagerService_EmbedUrl_Params, params);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ViewManagerService_EmbedUrl_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ViewManagerServiceProxy.prototype.embed = function(view_id, client) {
    var params = new ViewManagerService_Embed_Params();
    params.view_id = view_id;
    params.client = core.isHandle(client) ? client : connection.bindImpl(client, ViewManagerClient);
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageWithRequestIDBuilder(
          kViewManagerService_Embed_Name,
          codec.align(ViewManagerService_Embed_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ViewManagerService_Embed_Params, params);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ViewManagerService_Embed_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function ViewManagerServiceStub(delegate) {
    bindings.StubBase.call(this, delegate);
  }
  ViewManagerServiceStub.prototype = Object.create(bindings.StubBase.prototype);
  ViewManagerServiceStub.prototype.createView = function(view_id) {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.createView && bindings.StubBindings(this).delegate.createView(view_id);
  }
  ViewManagerServiceStub.prototype.deleteView = function(view_id) {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.deleteView && bindings.StubBindings(this).delegate.deleteView(view_id);
  }
  ViewManagerServiceStub.prototype.setViewBounds = function(view_id, bounds) {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.setViewBounds && bindings.StubBindings(this).delegate.setViewBounds(view_id, bounds);
  }
  ViewManagerServiceStub.prototype.setViewVisibility = function(view_id, visible) {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.setViewVisibility && bindings.StubBindings(this).delegate.setViewVisibility(view_id, visible);
  }
  ViewManagerServiceStub.prototype.setViewProperty = function(view_id, name, value) {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.setViewProperty && bindings.StubBindings(this).delegate.setViewProperty(view_id, name, value);
  }
  ViewManagerServiceStub.prototype.addView = function(parent, child) {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.addView && bindings.StubBindings(this).delegate.addView(parent, child);
  }
  ViewManagerServiceStub.prototype.removeViewFromParent = function(view_id) {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.removeViewFromParent && bindings.StubBindings(this).delegate.removeViewFromParent(view_id);
  }
  ViewManagerServiceStub.prototype.reorderView = function(view_id, relative_view_id, direction) {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.reorderView && bindings.StubBindings(this).delegate.reorderView(view_id, relative_view_id, direction);
  }
  ViewManagerServiceStub.prototype.getViewTree = function(view_id) {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.getViewTree && bindings.StubBindings(this).delegate.getViewTree(view_id);
  }
  ViewManagerServiceStub.prototype.setViewSurfaceId = function(view_id, surface_id) {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.setViewSurfaceId && bindings.StubBindings(this).delegate.setViewSurfaceId(view_id, surface_id);
  }
  ViewManagerServiceStub.prototype.embedUrl = function(url, view_id, services, exposed_services) {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.embedUrl && bindings.StubBindings(this).delegate.embedUrl(url, view_id, connection.bindHandleToStub(services, service_provider$.ServiceProvider), connection.bindHandleToProxy(exposed_services, service_provider$.ServiceProvider));
  }
  ViewManagerServiceStub.prototype.embed = function(view_id, client) {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.embed && bindings.StubBindings(this).delegate.embed(view_id, connection.bindHandleToProxy(client, ViewManagerClient));
  }

  ViewManagerServiceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  ViewManagerServiceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kViewManagerService_CreateView_Name:
      var params = reader.decodeStruct(ViewManagerService_CreateView_Params);
      return this.createView(params.view_id).then(function(response) {
        var responseParams =
            new ViewManagerService_CreateView_ResponseParams();
        responseParams.error_code = response.error_code;
        var builder = new codec.MessageWithRequestIDBuilder(
            kViewManagerService_CreateView_Name,
            codec.align(ViewManagerService_CreateView_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ViewManagerService_CreateView_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
    case kViewManagerService_DeleteView_Name:
      var params = reader.decodeStruct(ViewManagerService_DeleteView_Params);
      return this.deleteView(params.view_id).then(function(response) {
        var responseParams =
            new ViewManagerService_DeleteView_ResponseParams();
        responseParams.success = response.success;
        var builder = new codec.MessageWithRequestIDBuilder(
            kViewManagerService_DeleteView_Name,
            codec.align(ViewManagerService_DeleteView_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ViewManagerService_DeleteView_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
    case kViewManagerService_SetViewBounds_Name:
      var params = reader.decodeStruct(ViewManagerService_SetViewBounds_Params);
      return this.setViewBounds(params.view_id, params.bounds).then(function(response) {
        var responseParams =
            new ViewManagerService_SetViewBounds_ResponseParams();
        responseParams.success = response.success;
        var builder = new codec.MessageWithRequestIDBuilder(
            kViewManagerService_SetViewBounds_Name,
            codec.align(ViewManagerService_SetViewBounds_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ViewManagerService_SetViewBounds_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
    case kViewManagerService_SetViewVisibility_Name:
      var params = reader.decodeStruct(ViewManagerService_SetViewVisibility_Params);
      return this.setViewVisibility(params.view_id, params.visible).then(function(response) {
        var responseParams =
            new ViewManagerService_SetViewVisibility_ResponseParams();
        responseParams.success = response.success;
        var builder = new codec.MessageWithRequestIDBuilder(
            kViewManagerService_SetViewVisibility_Name,
            codec.align(ViewManagerService_SetViewVisibility_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ViewManagerService_SetViewVisibility_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
    case kViewManagerService_SetViewProperty_Name:
      var params = reader.decodeStruct(ViewManagerService_SetViewProperty_Params);
      return this.setViewProperty(params.view_id, params.name, params.value).then(function(response) {
        var responseParams =
            new ViewManagerService_SetViewProperty_ResponseParams();
        responseParams.success = response.success;
        var builder = new codec.MessageWithRequestIDBuilder(
            kViewManagerService_SetViewProperty_Name,
            codec.align(ViewManagerService_SetViewProperty_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ViewManagerService_SetViewProperty_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
    case kViewManagerService_AddView_Name:
      var params = reader.decodeStruct(ViewManagerService_AddView_Params);
      return this.addView(params.parent, params.child).then(function(response) {
        var responseParams =
            new ViewManagerService_AddView_ResponseParams();
        responseParams.success = response.success;
        var builder = new codec.MessageWithRequestIDBuilder(
            kViewManagerService_AddView_Name,
            codec.align(ViewManagerService_AddView_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ViewManagerService_AddView_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
    case kViewManagerService_RemoveViewFromParent_Name:
      var params = reader.decodeStruct(ViewManagerService_RemoveViewFromParent_Params);
      return this.removeViewFromParent(params.view_id).then(function(response) {
        var responseParams =
            new ViewManagerService_RemoveViewFromParent_ResponseParams();
        responseParams.success = response.success;
        var builder = new codec.MessageWithRequestIDBuilder(
            kViewManagerService_RemoveViewFromParent_Name,
            codec.align(ViewManagerService_RemoveViewFromParent_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ViewManagerService_RemoveViewFromParent_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
    case kViewManagerService_ReorderView_Name:
      var params = reader.decodeStruct(ViewManagerService_ReorderView_Params);
      return this.reorderView(params.view_id, params.relative_view_id, params.direction).then(function(response) {
        var responseParams =
            new ViewManagerService_ReorderView_ResponseParams();
        responseParams.success = response.success;
        var builder = new codec.MessageWithRequestIDBuilder(
            kViewManagerService_ReorderView_Name,
            codec.align(ViewManagerService_ReorderView_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ViewManagerService_ReorderView_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
    case kViewManagerService_GetViewTree_Name:
      var params = reader.decodeStruct(ViewManagerService_GetViewTree_Params);
      return this.getViewTree(params.view_id).then(function(response) {
        var responseParams =
            new ViewManagerService_GetViewTree_ResponseParams();
        responseParams.views = response.views;
        var builder = new codec.MessageWithRequestIDBuilder(
            kViewManagerService_GetViewTree_Name,
            codec.align(ViewManagerService_GetViewTree_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ViewManagerService_GetViewTree_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
    case kViewManagerService_SetViewSurfaceId_Name:
      var params = reader.decodeStruct(ViewManagerService_SetViewSurfaceId_Params);
      return this.setViewSurfaceId(params.view_id, params.surface_id).then(function(response) {
        var responseParams =
            new ViewManagerService_SetViewSurfaceId_ResponseParams();
        responseParams.success = response.success;
        var builder = new codec.MessageWithRequestIDBuilder(
            kViewManagerService_SetViewSurfaceId_Name,
            codec.align(ViewManagerService_SetViewSurfaceId_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ViewManagerService_SetViewSurfaceId_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
    case kViewManagerService_EmbedUrl_Name:
      var params = reader.decodeStruct(ViewManagerService_EmbedUrl_Params);
      return this.embedUrl(params.url, params.view_id, params.services, params.exposed_services).then(function(response) {
        var responseParams =
            new ViewManagerService_EmbedUrl_ResponseParams();
        responseParams.success = response.success;
        var builder = new codec.MessageWithRequestIDBuilder(
            kViewManagerService_EmbedUrl_Name,
            codec.align(ViewManagerService_EmbedUrl_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ViewManagerService_EmbedUrl_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
    case kViewManagerService_Embed_Name:
      var params = reader.decodeStruct(ViewManagerService_Embed_Params);
      return this.embed(params.view_id, params.client).then(function(response) {
        var responseParams =
            new ViewManagerService_Embed_ResponseParams();
        responseParams.success = response.success;
        var builder = new codec.MessageWithRequestIDBuilder(
            kViewManagerService_Embed_Name,
            codec.align(ViewManagerService_Embed_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ViewManagerService_Embed_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
    default:
      return Promise.reject(Error("Unhandled message: " + reader.messageName));
    }
  };

  function validateViewManagerServiceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kViewManagerService_CreateView_Name:
        if (message.expectsResponse())
          paramsClass = ViewManagerService_CreateView_Params;
      break;
      case kViewManagerService_DeleteView_Name:
        if (message.expectsResponse())
          paramsClass = ViewManagerService_DeleteView_Params;
      break;
      case kViewManagerService_SetViewBounds_Name:
        if (message.expectsResponse())
          paramsClass = ViewManagerService_SetViewBounds_Params;
      break;
      case kViewManagerService_SetViewVisibility_Name:
        if (message.expectsResponse())
          paramsClass = ViewManagerService_SetViewVisibility_Params;
      break;
      case kViewManagerService_SetViewProperty_Name:
        if (message.expectsResponse())
          paramsClass = ViewManagerService_SetViewProperty_Params;
      break;
      case kViewManagerService_AddView_Name:
        if (message.expectsResponse())
          paramsClass = ViewManagerService_AddView_Params;
      break;
      case kViewManagerService_RemoveViewFromParent_Name:
        if (message.expectsResponse())
          paramsClass = ViewManagerService_RemoveViewFromParent_Params;
      break;
      case kViewManagerService_ReorderView_Name:
        if (message.expectsResponse())
          paramsClass = ViewManagerService_ReorderView_Params;
      break;
      case kViewManagerService_GetViewTree_Name:
        if (message.expectsResponse())
          paramsClass = ViewManagerService_GetViewTree_Params;
      break;
      case kViewManagerService_SetViewSurfaceId_Name:
        if (message.expectsResponse())
          paramsClass = ViewManagerService_SetViewSurfaceId_Params;
      break;
      case kViewManagerService_EmbedUrl_Name:
        if (message.expectsResponse())
          paramsClass = ViewManagerService_EmbedUrl_Params;
      break;
      case kViewManagerService_Embed_Name:
        if (message.expectsResponse())
          paramsClass = ViewManagerService_Embed_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateViewManagerServiceResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kViewManagerService_CreateView_Name:
        if (message.isResponse())
          paramsClass = ViewManagerService_CreateView_ResponseParams;
        break;
      case kViewManagerService_DeleteView_Name:
        if (message.isResponse())
          paramsClass = ViewManagerService_DeleteView_ResponseParams;
        break;
      case kViewManagerService_SetViewBounds_Name:
        if (message.isResponse())
          paramsClass = ViewManagerService_SetViewBounds_ResponseParams;
        break;
      case kViewManagerService_SetViewVisibility_Name:
        if (message.isResponse())
          paramsClass = ViewManagerService_SetViewVisibility_ResponseParams;
        break;
      case kViewManagerService_SetViewProperty_Name:
        if (message.isResponse())
          paramsClass = ViewManagerService_SetViewProperty_ResponseParams;
        break;
      case kViewManagerService_AddView_Name:
        if (message.isResponse())
          paramsClass = ViewManagerService_AddView_ResponseParams;
        break;
      case kViewManagerService_RemoveViewFromParent_Name:
        if (message.isResponse())
          paramsClass = ViewManagerService_RemoveViewFromParent_ResponseParams;
        break;
      case kViewManagerService_ReorderView_Name:
        if (message.isResponse())
          paramsClass = ViewManagerService_ReorderView_ResponseParams;
        break;
      case kViewManagerService_GetViewTree_Name:
        if (message.isResponse())
          paramsClass = ViewManagerService_GetViewTree_ResponseParams;
        break;
      case kViewManagerService_SetViewSurfaceId_Name:
        if (message.isResponse())
          paramsClass = ViewManagerService_SetViewSurfaceId_ResponseParams;
        break;
      case kViewManagerService_EmbedUrl_Name:
        if (message.isResponse())
          paramsClass = ViewManagerService_EmbedUrl_ResponseParams;
        break;
      case kViewManagerService_Embed_Name:
        if (message.isResponse())
          paramsClass = ViewManagerService_Embed_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var ViewManagerService = {
    name: 'mojo::ViewManagerService',
    proxyClass: ViewManagerServiceProxy,
    stubClass: ViewManagerServiceStub,
    validateRequest: validateViewManagerServiceRequest,
    validateResponse: validateViewManagerServiceResponse,
  };
  ViewManagerServiceStub.prototype.validator = validateViewManagerServiceRequest;
  ViewManagerServiceProxy.prototype.validator = validateViewManagerServiceResponse;

  var kViewManagerClient_OnEmbed_Name = 0;
  var kViewManagerClient_OnEmbeddedAppDisconnected_Name = 1;
  var kViewManagerClient_OnViewBoundsChanged_Name = 2;
  var kViewManagerClient_OnViewViewportMetricsChanged_Name = 3;
  var kViewManagerClient_OnViewHierarchyChanged_Name = 4;
  var kViewManagerClient_OnViewReordered_Name = 5;
  var kViewManagerClient_OnViewDeleted_Name = 6;
  var kViewManagerClient_OnViewVisibilityChanged_Name = 7;
  var kViewManagerClient_OnViewDrawnStateChanged_Name = 8;
  var kViewManagerClient_OnViewSharedPropertyChanged_Name = 9;
  var kViewManagerClient_OnViewInputEvent_Name = 10;

  function ViewManagerClientProxy(receiver) {
    bindings.ProxyBase.call(this, receiver);
  }
  ViewManagerClientProxy.prototype = Object.create(bindings.ProxyBase.prototype);
  ViewManagerClientProxy.prototype.onEmbed = function(connection_id, embedder_url, root, view_manager_service, services, exposed_services, window_manager_pipe) {
    var params = new ViewManagerClient_OnEmbed_Params();
    params.connection_id = connection_id;
    params.embedder_url = embedder_url;
    params.root = root;
    params.view_manager_service = core.isHandle(view_manager_service) ? view_manager_service : connection.bindImpl(view_manager_service, ViewManagerService);
    params.services = core.isHandle(services) ? services : connection.bindProxy(services, service_provider$.ServiceProvider);
    params.exposed_services = core.isHandle(exposed_services) ? exposed_services : connection.bindImpl(exposed_services, service_provider$.ServiceProvider);
    params.window_manager_pipe = window_manager_pipe;
    var builder = new codec.MessageBuilder(
        kViewManagerClient_OnEmbed_Name,
        codec.align(ViewManagerClient_OnEmbed_Params.encodedSize));
    builder.encodeStruct(ViewManagerClient_OnEmbed_Params, params);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ViewManagerClientProxy.prototype.onEmbeddedAppDisconnected = function(view) {
    var params = new ViewManagerClient_OnEmbeddedAppDisconnected_Params();
    params.view = view;
    var builder = new codec.MessageBuilder(
        kViewManagerClient_OnEmbeddedAppDisconnected_Name,
        codec.align(ViewManagerClient_OnEmbeddedAppDisconnected_Params.encodedSize));
    builder.encodeStruct(ViewManagerClient_OnEmbeddedAppDisconnected_Params, params);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ViewManagerClientProxy.prototype.onViewBoundsChanged = function(view, old_bounds, new_bounds) {
    var params = new ViewManagerClient_OnViewBoundsChanged_Params();
    params.view = view;
    params.old_bounds = old_bounds;
    params.new_bounds = new_bounds;
    var builder = new codec.MessageBuilder(
        kViewManagerClient_OnViewBoundsChanged_Name,
        codec.align(ViewManagerClient_OnViewBoundsChanged_Params.encodedSize));
    builder.encodeStruct(ViewManagerClient_OnViewBoundsChanged_Params, params);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ViewManagerClientProxy.prototype.onViewViewportMetricsChanged = function(old_metrics, new_metrics) {
    var params = new ViewManagerClient_OnViewViewportMetricsChanged_Params();
    params.old_metrics = old_metrics;
    params.new_metrics = new_metrics;
    var builder = new codec.MessageBuilder(
        kViewManagerClient_OnViewViewportMetricsChanged_Name,
        codec.align(ViewManagerClient_OnViewViewportMetricsChanged_Params.encodedSize));
    builder.encodeStruct(ViewManagerClient_OnViewViewportMetricsChanged_Params, params);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ViewManagerClientProxy.prototype.onViewHierarchyChanged = function(view, new_parent, old_parent, views) {
    var params = new ViewManagerClient_OnViewHierarchyChanged_Params();
    params.view = view;
    params.new_parent = new_parent;
    params.old_parent = old_parent;
    params.views = views;
    var builder = new codec.MessageBuilder(
        kViewManagerClient_OnViewHierarchyChanged_Name,
        codec.align(ViewManagerClient_OnViewHierarchyChanged_Params.encodedSize));
    builder.encodeStruct(ViewManagerClient_OnViewHierarchyChanged_Params, params);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ViewManagerClientProxy.prototype.onViewReordered = function(view_id, relative_view_id, direction) {
    var params = new ViewManagerClient_OnViewReordered_Params();
    params.view_id = view_id;
    params.relative_view_id = relative_view_id;
    params.direction = direction;
    var builder = new codec.MessageBuilder(
        kViewManagerClient_OnViewReordered_Name,
        codec.align(ViewManagerClient_OnViewReordered_Params.encodedSize));
    builder.encodeStruct(ViewManagerClient_OnViewReordered_Params, params);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ViewManagerClientProxy.prototype.onViewDeleted = function(view) {
    var params = new ViewManagerClient_OnViewDeleted_Params();
    params.view = view;
    var builder = new codec.MessageBuilder(
        kViewManagerClient_OnViewDeleted_Name,
        codec.align(ViewManagerClient_OnViewDeleted_Params.encodedSize));
    builder.encodeStruct(ViewManagerClient_OnViewDeleted_Params, params);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ViewManagerClientProxy.prototype.onViewVisibilityChanged = function(view, visible) {
    var params = new ViewManagerClient_OnViewVisibilityChanged_Params();
    params.view = view;
    params.visible = visible;
    var builder = new codec.MessageBuilder(
        kViewManagerClient_OnViewVisibilityChanged_Name,
        codec.align(ViewManagerClient_OnViewVisibilityChanged_Params.encodedSize));
    builder.encodeStruct(ViewManagerClient_OnViewVisibilityChanged_Params, params);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ViewManagerClientProxy.prototype.onViewDrawnStateChanged = function(view, drawn) {
    var params = new ViewManagerClient_OnViewDrawnStateChanged_Params();
    params.view = view;
    params.drawn = drawn;
    var builder = new codec.MessageBuilder(
        kViewManagerClient_OnViewDrawnStateChanged_Name,
        codec.align(ViewManagerClient_OnViewDrawnStateChanged_Params.encodedSize));
    builder.encodeStruct(ViewManagerClient_OnViewDrawnStateChanged_Params, params);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ViewManagerClientProxy.prototype.onViewSharedPropertyChanged = function(view, name, new_data) {
    var params = new ViewManagerClient_OnViewSharedPropertyChanged_Params();
    params.view = view;
    params.name = name;
    params.new_data = new_data;
    var builder = new codec.MessageBuilder(
        kViewManagerClient_OnViewSharedPropertyChanged_Name,
        codec.align(ViewManagerClient_OnViewSharedPropertyChanged_Params.encodedSize));
    builder.encodeStruct(ViewManagerClient_OnViewSharedPropertyChanged_Params, params);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ViewManagerClientProxy.prototype.onViewInputEvent = function(view, event) {
    var params = new ViewManagerClient_OnViewInputEvent_Params();
    params.view = view;
    params.event = event;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageWithRequestIDBuilder(
          kViewManagerClient_OnViewInputEvent_Name,
          codec.align(ViewManagerClient_OnViewInputEvent_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ViewManagerClient_OnViewInputEvent_Params, params);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ViewManagerClient_OnViewInputEvent_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function ViewManagerClientStub(delegate) {
    bindings.StubBase.call(this, delegate);
  }
  ViewManagerClientStub.prototype = Object.create(bindings.StubBase.prototype);
  ViewManagerClientStub.prototype.onEmbed = function(connection_id, embedder_url, root, view_manager_service, services, exposed_services, window_manager_pipe) {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.onEmbed && bindings.StubBindings(this).delegate.onEmbed(connection_id, embedder_url, root, connection.bindHandleToProxy(view_manager_service, ViewManagerService), connection.bindHandleToStub(services, service_provider$.ServiceProvider), connection.bindHandleToProxy(exposed_services, service_provider$.ServiceProvider), window_manager_pipe);
  }
  ViewManagerClientStub.prototype.onEmbeddedAppDisconnected = function(view) {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.onEmbeddedAppDisconnected && bindings.StubBindings(this).delegate.onEmbeddedAppDisconnected(view);
  }
  ViewManagerClientStub.prototype.onViewBoundsChanged = function(view, old_bounds, new_bounds) {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.onViewBoundsChanged && bindings.StubBindings(this).delegate.onViewBoundsChanged(view, old_bounds, new_bounds);
  }
  ViewManagerClientStub.prototype.onViewViewportMetricsChanged = function(old_metrics, new_metrics) {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.onViewViewportMetricsChanged && bindings.StubBindings(this).delegate.onViewViewportMetricsChanged(old_metrics, new_metrics);
  }
  ViewManagerClientStub.prototype.onViewHierarchyChanged = function(view, new_parent, old_parent, views) {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.onViewHierarchyChanged && bindings.StubBindings(this).delegate.onViewHierarchyChanged(view, new_parent, old_parent, views);
  }
  ViewManagerClientStub.prototype.onViewReordered = function(view_id, relative_view_id, direction) {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.onViewReordered && bindings.StubBindings(this).delegate.onViewReordered(view_id, relative_view_id, direction);
  }
  ViewManagerClientStub.prototype.onViewDeleted = function(view) {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.onViewDeleted && bindings.StubBindings(this).delegate.onViewDeleted(view);
  }
  ViewManagerClientStub.prototype.onViewVisibilityChanged = function(view, visible) {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.onViewVisibilityChanged && bindings.StubBindings(this).delegate.onViewVisibilityChanged(view, visible);
  }
  ViewManagerClientStub.prototype.onViewDrawnStateChanged = function(view, drawn) {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.onViewDrawnStateChanged && bindings.StubBindings(this).delegate.onViewDrawnStateChanged(view, drawn);
  }
  ViewManagerClientStub.prototype.onViewSharedPropertyChanged = function(view, name, new_data) {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.onViewSharedPropertyChanged && bindings.StubBindings(this).delegate.onViewSharedPropertyChanged(view, name, new_data);
  }
  ViewManagerClientStub.prototype.onViewInputEvent = function(view, event) {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.onViewInputEvent && bindings.StubBindings(this).delegate.onViewInputEvent(view, event);
  }

  ViewManagerClientStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kViewManagerClient_OnEmbed_Name:
      var params = reader.decodeStruct(ViewManagerClient_OnEmbed_Params);
      this.onEmbed(params.connection_id, params.embedder_url, params.root, params.view_manager_service, params.services, params.exposed_services, params.window_manager_pipe);
      return true;
    case kViewManagerClient_OnEmbeddedAppDisconnected_Name:
      var params = reader.decodeStruct(ViewManagerClient_OnEmbeddedAppDisconnected_Params);
      this.onEmbeddedAppDisconnected(params.view);
      return true;
    case kViewManagerClient_OnViewBoundsChanged_Name:
      var params = reader.decodeStruct(ViewManagerClient_OnViewBoundsChanged_Params);
      this.onViewBoundsChanged(params.view, params.old_bounds, params.new_bounds);
      return true;
    case kViewManagerClient_OnViewViewportMetricsChanged_Name:
      var params = reader.decodeStruct(ViewManagerClient_OnViewViewportMetricsChanged_Params);
      this.onViewViewportMetricsChanged(params.old_metrics, params.new_metrics);
      return true;
    case kViewManagerClient_OnViewHierarchyChanged_Name:
      var params = reader.decodeStruct(ViewManagerClient_OnViewHierarchyChanged_Params);
      this.onViewHierarchyChanged(params.view, params.new_parent, params.old_parent, params.views);
      return true;
    case kViewManagerClient_OnViewReordered_Name:
      var params = reader.decodeStruct(ViewManagerClient_OnViewReordered_Params);
      this.onViewReordered(params.view_id, params.relative_view_id, params.direction);
      return true;
    case kViewManagerClient_OnViewDeleted_Name:
      var params = reader.decodeStruct(ViewManagerClient_OnViewDeleted_Params);
      this.onViewDeleted(params.view);
      return true;
    case kViewManagerClient_OnViewVisibilityChanged_Name:
      var params = reader.decodeStruct(ViewManagerClient_OnViewVisibilityChanged_Params);
      this.onViewVisibilityChanged(params.view, params.visible);
      return true;
    case kViewManagerClient_OnViewDrawnStateChanged_Name:
      var params = reader.decodeStruct(ViewManagerClient_OnViewDrawnStateChanged_Params);
      this.onViewDrawnStateChanged(params.view, params.drawn);
      return true;
    case kViewManagerClient_OnViewSharedPropertyChanged_Name:
      var params = reader.decodeStruct(ViewManagerClient_OnViewSharedPropertyChanged_Params);
      this.onViewSharedPropertyChanged(params.view, params.name, params.new_data);
      return true;
    default:
      return false;
    }
  };

  ViewManagerClientStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kViewManagerClient_OnViewInputEvent_Name:
      var params = reader.decodeStruct(ViewManagerClient_OnViewInputEvent_Params);
      return this.onViewInputEvent(params.view, params.event).then(function(response) {
        var responseParams =
            new ViewManagerClient_OnViewInputEvent_ResponseParams();
        var builder = new codec.MessageWithRequestIDBuilder(
            kViewManagerClient_OnViewInputEvent_Name,
            codec.align(ViewManagerClient_OnViewInputEvent_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ViewManagerClient_OnViewInputEvent_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
    default:
      return Promise.reject(Error("Unhandled message: " + reader.messageName));
    }
  };

  function validateViewManagerClientRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kViewManagerClient_OnEmbed_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ViewManagerClient_OnEmbed_Params;
      break;
      case kViewManagerClient_OnEmbeddedAppDisconnected_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ViewManagerClient_OnEmbeddedAppDisconnected_Params;
      break;
      case kViewManagerClient_OnViewBoundsChanged_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ViewManagerClient_OnViewBoundsChanged_Params;
      break;
      case kViewManagerClient_OnViewViewportMetricsChanged_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ViewManagerClient_OnViewViewportMetricsChanged_Params;
      break;
      case kViewManagerClient_OnViewHierarchyChanged_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ViewManagerClient_OnViewHierarchyChanged_Params;
      break;
      case kViewManagerClient_OnViewReordered_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ViewManagerClient_OnViewReordered_Params;
      break;
      case kViewManagerClient_OnViewDeleted_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ViewManagerClient_OnViewDeleted_Params;
      break;
      case kViewManagerClient_OnViewVisibilityChanged_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ViewManagerClient_OnViewVisibilityChanged_Params;
      break;
      case kViewManagerClient_OnViewDrawnStateChanged_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ViewManagerClient_OnViewDrawnStateChanged_Params;
      break;
      case kViewManagerClient_OnViewSharedPropertyChanged_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ViewManagerClient_OnViewSharedPropertyChanged_Params;
      break;
      case kViewManagerClient_OnViewInputEvent_Name:
        if (message.expectsResponse())
          paramsClass = ViewManagerClient_OnViewInputEvent_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateViewManagerClientResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kViewManagerClient_OnViewInputEvent_Name:
        if (message.isResponse())
          paramsClass = ViewManagerClient_OnViewInputEvent_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var ViewManagerClient = {
    name: 'mojo::ViewManagerClient',
    proxyClass: ViewManagerClientProxy,
    stubClass: ViewManagerClientStub,
    validateRequest: validateViewManagerClientRequest,
    validateResponse: validateViewManagerClientResponse,
  };
  ViewManagerClientStub.prototype.validator = validateViewManagerClientRequest;
  ViewManagerClientProxy.prototype.validator = validateViewManagerClientResponse;


  var exports = {};
  exports.ErrorCode = ErrorCode;
  exports.ViewData = ViewData;
  exports.ViewManagerService = ViewManagerService;
  exports.ViewManagerClient = ViewManagerClient;

  module.exports = exports;
</script>

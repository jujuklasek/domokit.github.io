<!-- Copyright 2014 The Chromium Authors. All rights reserved.
     Use of this source code is governed by a BSD-style license that can be
     found in the LICENSE file. -->

<import src="/gen/mojo/public/sky/bindings.sky" as="bindings" />
<import src="/gen/mojo/public/sky/codec.sky" as="codec" />
<import src="/gen/mojo/public/sky/connection.sky" as="connection" />
<import src="/gen/mojo/public/sky/core.sky" as="core" />
<import src="/gen/mojo/public/sky/validator.sky" as="validator" />
<import src="/gen/mojo/services/input_events/public/interfaces/input_events.mojom.sky" as="input_events$" />
<import src="/gen/mojo/public/interfaces/application/service_provider.mojom.sky" as="service_provider$" />
<script>

  function WindowManager_Embed_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WindowManager_Embed_Params.prototype.initDefaults_ = function() {
    this.url = null;
    this.services = null;
    this.exposed_services = null;
  };
  WindowManager_Embed_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WindowManager_Embed_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, WindowManager_Embed_Params.encodedSize, 3);
    if (err !== validator.validationError.NONE)
        return err;
    // validate WindowManager_Embed_Params.url
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;
    // validate WindowManager_Embed_Params.services
    err = messageValidator.validateHandle(offset + codec.kStructHeaderSize + 8, true)
    if (err !== validator.validationError.NONE)
        return err;
    // validate WindowManager_Embed_Params.exposed_services
    err = messageValidator.validateHandle(offset + codec.kStructHeaderSize + 12, true)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WindowManager_Embed_Params.encodedSize = codec.kStructHeaderSize + 16;

  WindowManager_Embed_Params.decode = function(decoder) {
    var packed;
    var val = new WindowManager_Embed_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.url = decoder.decodeStruct(codec.String);
    val.services = decoder.decodeStruct(codec.Handle);
    val.exposed_services = decoder.decodeStruct(codec.Handle);
    return val;
  };

  WindowManager_Embed_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WindowManager_Embed_Params.encodedSize);
    encoder.writeUint32(3);
    encoder.encodeStruct(codec.String, val.url);
    encoder.encodeStruct(codec.Handle, val.services);
    encoder.encodeStruct(codec.Handle, val.exposed_services);
  };

  function WindowManager_SetCapture_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WindowManager_SetCapture_Params.prototype.initDefaults_ = function() {
    this.view_id = 0;
  };
  WindowManager_SetCapture_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WindowManager_SetCapture_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, WindowManager_SetCapture_Params.encodedSize, 1);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WindowManager_SetCapture_Params.encodedSize = codec.kStructHeaderSize + 8;

  WindowManager_SetCapture_Params.decode = function(decoder) {
    var packed;
    var val = new WindowManager_SetCapture_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.view_id = decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  WindowManager_SetCapture_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WindowManager_SetCapture_Params.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStruct(codec.Uint32, val.view_id);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function WindowManager_SetCapture_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WindowManager_SetCapture_ResponseParams.prototype.initDefaults_ = function() {
    this.success = false;
  };
  WindowManager_SetCapture_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WindowManager_SetCapture_ResponseParams.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, WindowManager_SetCapture_ResponseParams.encodedSize, 1);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WindowManager_SetCapture_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  WindowManager_SetCapture_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new WindowManager_SetCapture_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.success = decoder.decodeStruct(codec.Uint8);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  WindowManager_SetCapture_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WindowManager_SetCapture_ResponseParams.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStruct(codec.Uint8, val.success);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function WindowManager_FocusWindow_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WindowManager_FocusWindow_Params.prototype.initDefaults_ = function() {
    this.view_id = 0;
  };
  WindowManager_FocusWindow_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WindowManager_FocusWindow_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, WindowManager_FocusWindow_Params.encodedSize, 1);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WindowManager_FocusWindow_Params.encodedSize = codec.kStructHeaderSize + 8;

  WindowManager_FocusWindow_Params.decode = function(decoder) {
    var packed;
    var val = new WindowManager_FocusWindow_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.view_id = decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  WindowManager_FocusWindow_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WindowManager_FocusWindow_Params.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStruct(codec.Uint32, val.view_id);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function WindowManager_FocusWindow_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WindowManager_FocusWindow_ResponseParams.prototype.initDefaults_ = function() {
    this.success = false;
  };
  WindowManager_FocusWindow_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WindowManager_FocusWindow_ResponseParams.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, WindowManager_FocusWindow_ResponseParams.encodedSize, 1);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WindowManager_FocusWindow_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  WindowManager_FocusWindow_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new WindowManager_FocusWindow_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.success = decoder.decodeStruct(codec.Uint8);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  WindowManager_FocusWindow_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WindowManager_FocusWindow_ResponseParams.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStruct(codec.Uint8, val.success);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function WindowManager_ActivateWindow_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WindowManager_ActivateWindow_Params.prototype.initDefaults_ = function() {
    this.view_id = 0;
  };
  WindowManager_ActivateWindow_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WindowManager_ActivateWindow_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, WindowManager_ActivateWindow_Params.encodedSize, 1);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WindowManager_ActivateWindow_Params.encodedSize = codec.kStructHeaderSize + 8;

  WindowManager_ActivateWindow_Params.decode = function(decoder) {
    var packed;
    var val = new WindowManager_ActivateWindow_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.view_id = decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  WindowManager_ActivateWindow_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WindowManager_ActivateWindow_Params.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStruct(codec.Uint32, val.view_id);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function WindowManager_ActivateWindow_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WindowManager_ActivateWindow_ResponseParams.prototype.initDefaults_ = function() {
    this.success = false;
  };
  WindowManager_ActivateWindow_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WindowManager_ActivateWindow_ResponseParams.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, WindowManager_ActivateWindow_ResponseParams.encodedSize, 1);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WindowManager_ActivateWindow_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  WindowManager_ActivateWindow_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new WindowManager_ActivateWindow_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.success = decoder.decodeStruct(codec.Uint8);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  WindowManager_ActivateWindow_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WindowManager_ActivateWindow_ResponseParams.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStruct(codec.Uint8, val.success);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function WindowManager_GetFocusedAndActiveViews_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WindowManager_GetFocusedAndActiveViews_Params.prototype.initDefaults_ = function() {
    this.observer = null;
  };
  WindowManager_GetFocusedAndActiveViews_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WindowManager_GetFocusedAndActiveViews_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, WindowManager_GetFocusedAndActiveViews_Params.encodedSize, 1);
    if (err !== validator.validationError.NONE)
        return err;
    // validate WindowManager_GetFocusedAndActiveViews_Params.observer
    err = messageValidator.validateHandle(offset + codec.kStructHeaderSize + 0, true)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WindowManager_GetFocusedAndActiveViews_Params.encodedSize = codec.kStructHeaderSize + 8;

  WindowManager_GetFocusedAndActiveViews_Params.decode = function(decoder) {
    var packed;
    var val = new WindowManager_GetFocusedAndActiveViews_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.observer = decoder.decodeStruct(codec.Handle);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  WindowManager_GetFocusedAndActiveViews_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WindowManager_GetFocusedAndActiveViews_Params.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStruct(codec.Handle, val.observer);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function WindowManager_GetFocusedAndActiveViews_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WindowManager_GetFocusedAndActiveViews_ResponseParams.prototype.initDefaults_ = function() {
    this.capture_view_id = 0;
    this.focused_view_id = 0;
    this.active_view_id = 0;
  };
  WindowManager_GetFocusedAndActiveViews_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WindowManager_GetFocusedAndActiveViews_ResponseParams.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, WindowManager_GetFocusedAndActiveViews_ResponseParams.encodedSize, 3);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WindowManager_GetFocusedAndActiveViews_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  WindowManager_GetFocusedAndActiveViews_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new WindowManager_GetFocusedAndActiveViews_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.capture_view_id = decoder.decodeStruct(codec.Uint32);
    val.focused_view_id = decoder.decodeStruct(codec.Uint32);
    val.active_view_id = decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  WindowManager_GetFocusedAndActiveViews_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WindowManager_GetFocusedAndActiveViews_ResponseParams.encodedSize);
    encoder.writeUint32(3);
    encoder.encodeStruct(codec.Uint32, val.capture_view_id);
    encoder.encodeStruct(codec.Uint32, val.focused_view_id);
    encoder.encodeStruct(codec.Uint32, val.active_view_id);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function WindowManagerObserver_OnCaptureChanged_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WindowManagerObserver_OnCaptureChanged_Params.prototype.initDefaults_ = function() {
    this.capture_view_id = 0;
  };
  WindowManagerObserver_OnCaptureChanged_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WindowManagerObserver_OnCaptureChanged_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, WindowManagerObserver_OnCaptureChanged_Params.encodedSize, 1);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WindowManagerObserver_OnCaptureChanged_Params.encodedSize = codec.kStructHeaderSize + 8;

  WindowManagerObserver_OnCaptureChanged_Params.decode = function(decoder) {
    var packed;
    var val = new WindowManagerObserver_OnCaptureChanged_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.capture_view_id = decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  WindowManagerObserver_OnCaptureChanged_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WindowManagerObserver_OnCaptureChanged_Params.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStruct(codec.Uint32, val.capture_view_id);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function WindowManagerObserver_OnFocusChanged_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WindowManagerObserver_OnFocusChanged_Params.prototype.initDefaults_ = function() {
    this.focused_view_id = 0;
  };
  WindowManagerObserver_OnFocusChanged_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WindowManagerObserver_OnFocusChanged_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, WindowManagerObserver_OnFocusChanged_Params.encodedSize, 1);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WindowManagerObserver_OnFocusChanged_Params.encodedSize = codec.kStructHeaderSize + 8;

  WindowManagerObserver_OnFocusChanged_Params.decode = function(decoder) {
    var packed;
    var val = new WindowManagerObserver_OnFocusChanged_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.focused_view_id = decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  WindowManagerObserver_OnFocusChanged_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WindowManagerObserver_OnFocusChanged_Params.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStruct(codec.Uint32, val.focused_view_id);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function WindowManagerObserver_OnActiveWindowChanged_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WindowManagerObserver_OnActiveWindowChanged_Params.prototype.initDefaults_ = function() {
    this.focused_view_id = 0;
  };
  WindowManagerObserver_OnActiveWindowChanged_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WindowManagerObserver_OnActiveWindowChanged_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, WindowManagerObserver_OnActiveWindowChanged_Params.encodedSize, 1);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WindowManagerObserver_OnActiveWindowChanged_Params.encodedSize = codec.kStructHeaderSize + 8;

  WindowManagerObserver_OnActiveWindowChanged_Params.decode = function(decoder) {
    var packed;
    var val = new WindowManagerObserver_OnActiveWindowChanged_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.focused_view_id = decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  WindowManagerObserver_OnActiveWindowChanged_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WindowManagerObserver_OnActiveWindowChanged_Params.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStruct(codec.Uint32, val.focused_view_id);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  var kWindowManager_Embed_Name = 0;
  var kWindowManager_SetCapture_Name = 1;
  var kWindowManager_FocusWindow_Name = 2;
  var kWindowManager_ActivateWindow_Name = 3;
  var kWindowManager_GetFocusedAndActiveViews_Name = 4;

  function WindowManagerProxy(receiver) {
    bindings.ProxyBase.call(this, receiver);
  }
  WindowManagerProxy.prototype = Object.create(bindings.ProxyBase.prototype);
  WindowManagerProxy.prototype.embed = function(url, services, exposed_services) {
    var params = new WindowManager_Embed_Params();
    params.url = url;
    params.services = core.isHandle(services) ? services : connection.bindProxy(services, service_provider$.ServiceProvider);
    params.exposed_services = core.isHandle(exposed_services) ? exposed_services : connection.bindImpl(exposed_services, service_provider$.ServiceProvider);
    var builder = new codec.MessageBuilder(
        kWindowManager_Embed_Name,
        codec.align(WindowManager_Embed_Params.encodedSize));
    builder.encodeStruct(WindowManager_Embed_Params, params);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  WindowManagerProxy.prototype.setCapture = function(view_id) {
    var params = new WindowManager_SetCapture_Params();
    params.view_id = view_id;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageWithRequestIDBuilder(
          kWindowManager_SetCapture_Name,
          codec.align(WindowManager_SetCapture_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(WindowManager_SetCapture_Params, params);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(WindowManager_SetCapture_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  WindowManagerProxy.prototype.focusWindow = function(view_id) {
    var params = new WindowManager_FocusWindow_Params();
    params.view_id = view_id;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageWithRequestIDBuilder(
          kWindowManager_FocusWindow_Name,
          codec.align(WindowManager_FocusWindow_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(WindowManager_FocusWindow_Params, params);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(WindowManager_FocusWindow_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  WindowManagerProxy.prototype.activateWindow = function(view_id) {
    var params = new WindowManager_ActivateWindow_Params();
    params.view_id = view_id;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageWithRequestIDBuilder(
          kWindowManager_ActivateWindow_Name,
          codec.align(WindowManager_ActivateWindow_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(WindowManager_ActivateWindow_Params, params);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(WindowManager_ActivateWindow_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  WindowManagerProxy.prototype.getFocusedAndActiveViews = function(observer) {
    var params = new WindowManager_GetFocusedAndActiveViews_Params();
    params.observer = core.isHandle(observer) ? observer : connection.bindImpl(observer, WindowManagerObserver);
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageWithRequestIDBuilder(
          kWindowManager_GetFocusedAndActiveViews_Name,
          codec.align(WindowManager_GetFocusedAndActiveViews_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(WindowManager_GetFocusedAndActiveViews_Params, params);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(WindowManager_GetFocusedAndActiveViews_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function WindowManagerStub(delegate) {
    bindings.StubBase.call(this, delegate);
  }
  WindowManagerStub.prototype = Object.create(bindings.StubBase.prototype);
  WindowManagerStub.prototype.embed = function(url, services, exposed_services) {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.embed && bindings.StubBindings(this).delegate.embed(url, connection.bindHandleToStub(services, service_provider$.ServiceProvider), connection.bindHandleToProxy(exposed_services, service_provider$.ServiceProvider));
  }
  WindowManagerStub.prototype.setCapture = function(view_id) {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.setCapture && bindings.StubBindings(this).delegate.setCapture(view_id);
  }
  WindowManagerStub.prototype.focusWindow = function(view_id) {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.focusWindow && bindings.StubBindings(this).delegate.focusWindow(view_id);
  }
  WindowManagerStub.prototype.activateWindow = function(view_id) {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.activateWindow && bindings.StubBindings(this).delegate.activateWindow(view_id);
  }
  WindowManagerStub.prototype.getFocusedAndActiveViews = function(observer) {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.getFocusedAndActiveViews && bindings.StubBindings(this).delegate.getFocusedAndActiveViews(connection.bindHandleToProxy(observer, WindowManagerObserver));
  }

  WindowManagerStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kWindowManager_Embed_Name:
      var params = reader.decodeStruct(WindowManager_Embed_Params);
      this.embed(params.url, params.services, params.exposed_services);
      return true;
    default:
      return false;
    }
  };

  WindowManagerStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kWindowManager_SetCapture_Name:
      var params = reader.decodeStruct(WindowManager_SetCapture_Params);
      return this.setCapture(params.view_id).then(function(response) {
        var responseParams =
            new WindowManager_SetCapture_ResponseParams();
        responseParams.success = response.success;
        var builder = new codec.MessageWithRequestIDBuilder(
            kWindowManager_SetCapture_Name,
            codec.align(WindowManager_SetCapture_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(WindowManager_SetCapture_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
    case kWindowManager_FocusWindow_Name:
      var params = reader.decodeStruct(WindowManager_FocusWindow_Params);
      return this.focusWindow(params.view_id).then(function(response) {
        var responseParams =
            new WindowManager_FocusWindow_ResponseParams();
        responseParams.success = response.success;
        var builder = new codec.MessageWithRequestIDBuilder(
            kWindowManager_FocusWindow_Name,
            codec.align(WindowManager_FocusWindow_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(WindowManager_FocusWindow_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
    case kWindowManager_ActivateWindow_Name:
      var params = reader.decodeStruct(WindowManager_ActivateWindow_Params);
      return this.activateWindow(params.view_id).then(function(response) {
        var responseParams =
            new WindowManager_ActivateWindow_ResponseParams();
        responseParams.success = response.success;
        var builder = new codec.MessageWithRequestIDBuilder(
            kWindowManager_ActivateWindow_Name,
            codec.align(WindowManager_ActivateWindow_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(WindowManager_ActivateWindow_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
    case kWindowManager_GetFocusedAndActiveViews_Name:
      var params = reader.decodeStruct(WindowManager_GetFocusedAndActiveViews_Params);
      return this.getFocusedAndActiveViews(params.observer).then(function(response) {
        var responseParams =
            new WindowManager_GetFocusedAndActiveViews_ResponseParams();
        responseParams.capture_view_id = response.capture_view_id;
        responseParams.focused_view_id = response.focused_view_id;
        responseParams.active_view_id = response.active_view_id;
        var builder = new codec.MessageWithRequestIDBuilder(
            kWindowManager_GetFocusedAndActiveViews_Name,
            codec.align(WindowManager_GetFocusedAndActiveViews_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(WindowManager_GetFocusedAndActiveViews_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
    default:
      return Promise.reject(Error("Unhandled message: " + reader.messageName));
    }
  };

  function validateWindowManagerRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kWindowManager_Embed_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = WindowManager_Embed_Params;
      break;
      case kWindowManager_SetCapture_Name:
        if (message.expectsResponse())
          paramsClass = WindowManager_SetCapture_Params;
      break;
      case kWindowManager_FocusWindow_Name:
        if (message.expectsResponse())
          paramsClass = WindowManager_FocusWindow_Params;
      break;
      case kWindowManager_ActivateWindow_Name:
        if (message.expectsResponse())
          paramsClass = WindowManager_ActivateWindow_Params;
      break;
      case kWindowManager_GetFocusedAndActiveViews_Name:
        if (message.expectsResponse())
          paramsClass = WindowManager_GetFocusedAndActiveViews_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateWindowManagerResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kWindowManager_SetCapture_Name:
        if (message.isResponse())
          paramsClass = WindowManager_SetCapture_ResponseParams;
        break;
      case kWindowManager_FocusWindow_Name:
        if (message.isResponse())
          paramsClass = WindowManager_FocusWindow_ResponseParams;
        break;
      case kWindowManager_ActivateWindow_Name:
        if (message.isResponse())
          paramsClass = WindowManager_ActivateWindow_ResponseParams;
        break;
      case kWindowManager_GetFocusedAndActiveViews_Name:
        if (message.isResponse())
          paramsClass = WindowManager_GetFocusedAndActiveViews_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var WindowManager = {
    name: 'mojo::WindowManager',
    proxyClass: WindowManagerProxy,
    stubClass: WindowManagerStub,
    validateRequest: validateWindowManagerRequest,
    validateResponse: validateWindowManagerResponse,
  };
  WindowManagerStub.prototype.validator = validateWindowManagerRequest;
  WindowManagerProxy.prototype.validator = validateWindowManagerResponse;

  var kWindowManagerObserver_OnCaptureChanged_Name = 0;
  var kWindowManagerObserver_OnFocusChanged_Name = 1;
  var kWindowManagerObserver_OnActiveWindowChanged_Name = 2;

  function WindowManagerObserverProxy(receiver) {
    bindings.ProxyBase.call(this, receiver);
  }
  WindowManagerObserverProxy.prototype = Object.create(bindings.ProxyBase.prototype);
  WindowManagerObserverProxy.prototype.onCaptureChanged = function(capture_view_id) {
    var params = new WindowManagerObserver_OnCaptureChanged_Params();
    params.capture_view_id = capture_view_id;
    var builder = new codec.MessageBuilder(
        kWindowManagerObserver_OnCaptureChanged_Name,
        codec.align(WindowManagerObserver_OnCaptureChanged_Params.encodedSize));
    builder.encodeStruct(WindowManagerObserver_OnCaptureChanged_Params, params);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  WindowManagerObserverProxy.prototype.onFocusChanged = function(focused_view_id) {
    var params = new WindowManagerObserver_OnFocusChanged_Params();
    params.focused_view_id = focused_view_id;
    var builder = new codec.MessageBuilder(
        kWindowManagerObserver_OnFocusChanged_Name,
        codec.align(WindowManagerObserver_OnFocusChanged_Params.encodedSize));
    builder.encodeStruct(WindowManagerObserver_OnFocusChanged_Params, params);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  WindowManagerObserverProxy.prototype.onActiveWindowChanged = function(focused_view_id) {
    var params = new WindowManagerObserver_OnActiveWindowChanged_Params();
    params.focused_view_id = focused_view_id;
    var builder = new codec.MessageBuilder(
        kWindowManagerObserver_OnActiveWindowChanged_Name,
        codec.align(WindowManagerObserver_OnActiveWindowChanged_Params.encodedSize));
    builder.encodeStruct(WindowManagerObserver_OnActiveWindowChanged_Params, params);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function WindowManagerObserverStub(delegate) {
    bindings.StubBase.call(this, delegate);
  }
  WindowManagerObserverStub.prototype = Object.create(bindings.StubBase.prototype);
  WindowManagerObserverStub.prototype.onCaptureChanged = function(capture_view_id) {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.onCaptureChanged && bindings.StubBindings(this).delegate.onCaptureChanged(capture_view_id);
  }
  WindowManagerObserverStub.prototype.onFocusChanged = function(focused_view_id) {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.onFocusChanged && bindings.StubBindings(this).delegate.onFocusChanged(focused_view_id);
  }
  WindowManagerObserverStub.prototype.onActiveWindowChanged = function(focused_view_id) {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.onActiveWindowChanged && bindings.StubBindings(this).delegate.onActiveWindowChanged(focused_view_id);
  }

  WindowManagerObserverStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kWindowManagerObserver_OnCaptureChanged_Name:
      var params = reader.decodeStruct(WindowManagerObserver_OnCaptureChanged_Params);
      this.onCaptureChanged(params.capture_view_id);
      return true;
    case kWindowManagerObserver_OnFocusChanged_Name:
      var params = reader.decodeStruct(WindowManagerObserver_OnFocusChanged_Params);
      this.onFocusChanged(params.focused_view_id);
      return true;
    case kWindowManagerObserver_OnActiveWindowChanged_Name:
      var params = reader.decodeStruct(WindowManagerObserver_OnActiveWindowChanged_Params);
      this.onActiveWindowChanged(params.focused_view_id);
      return true;
    default:
      return false;
    }
  };

  WindowManagerObserverStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return Promise.reject(Error("Unhandled message: " + reader.messageName));
    }
  };

  function validateWindowManagerObserverRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kWindowManagerObserver_OnCaptureChanged_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = WindowManagerObserver_OnCaptureChanged_Params;
      break;
      case kWindowManagerObserver_OnFocusChanged_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = WindowManagerObserver_OnFocusChanged_Params;
      break;
      case kWindowManagerObserver_OnActiveWindowChanged_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = WindowManagerObserver_OnActiveWindowChanged_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateWindowManagerObserverResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var WindowManagerObserver = {
    name: 'mojo::WindowManagerObserver',
    proxyClass: WindowManagerObserverProxy,
    stubClass: WindowManagerObserverStub,
    validateRequest: validateWindowManagerObserverRequest,
    validateResponse: null,
  };
  WindowManagerObserverStub.prototype.validator = validateWindowManagerObserverRequest;
  WindowManagerObserverProxy.prototype.validator = null;


  var exports = {};
  exports.WindowManager = WindowManager;
  exports.WindowManagerObserver = WindowManagerObserver;

  module.exports = exports;
</script>

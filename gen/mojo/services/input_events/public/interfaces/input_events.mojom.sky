<!-- Copyright 2014 The Chromium Authors. All rights reserved.
     Use of this source code is governed by a BSD-style license that can be
     found in the LICENSE file. -->

<import src="/gen/mojo/public/sky/bindings.sky" as="bindings" />
<import src="/gen/mojo/public/sky/codec.sky" as="codec" />
<import src="/gen/mojo/public/sky/connection.sky" as="connection" />
<import src="/gen/mojo/public/sky/core.sky" as="core" />
<import src="/gen/mojo/public/sky/validator.sky" as="validator" />
<import src="/gen/mojo/services/geometry/public/interfaces/geometry.mojom.sky" as="geometry$" />
<import src="/gen/mojo/services/input_events/public/interfaces/input_event_constants.mojom.sky" as="input_event_constants$" />
<import src="/gen/mojo/services/input_events/public/interfaces/input_key_codes.mojom.sky" as="input_key_codes$" />
<script>

  function LocationData(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  LocationData.prototype.initDefaults_ = function() {
    this.in_view_location = null;
    this.screen_location = null;
  };
  LocationData.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  LocationData.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, LocationData.encodedSize, 2);
    if (err !== validator.validationError.NONE)
        return err;
    // validate LocationData.in_view_location
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, geometry$.Point, true);
    if (err !== validator.validationError.NONE)
        return err;
    // validate LocationData.screen_location
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, geometry$.Point, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  LocationData.encodedSize = codec.kStructHeaderSize + 16;

  LocationData.decode = function(decoder) {
    var packed;
    var val = new LocationData();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.in_view_location = decoder.decodeStructPointer(geometry$.Point);
    val.screen_location = decoder.decodeStructPointer(geometry$.Point);
    return val;
  };

  LocationData.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(LocationData.encodedSize);
    encoder.writeUint32(2);
    encoder.encodeStructPointer(geometry$.Point, val.in_view_location);
    encoder.encodeStructPointer(geometry$.Point, val.screen_location);
  };

  function KeyData(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  KeyData.prototype.initDefaults_ = function() {
    this.key_code = 0;
    this.is_char = false;
    this.character = 0;
    this.windows_key_code = 0;
    this.native_key_code = 0;
    this.text = 0;
    this.unmodified_text = 0;
  };
  KeyData.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  KeyData.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, KeyData.encodedSize, 7);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  KeyData.encodedSize = codec.kStructHeaderSize + 24;

  KeyData.decode = function(decoder) {
    var packed;
    var val = new KeyData();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.key_code = decoder.decodeStruct(codec.Int32);
    val.is_char = decoder.decodeStruct(codec.Uint8);
    decoder.skip(1);
    val.character = decoder.decodeStruct(codec.Uint16);
    val.windows_key_code = decoder.decodeStruct(codec.Int32);
    val.native_key_code = decoder.decodeStruct(codec.Int32);
    val.text = decoder.decodeStruct(codec.Uint16);
    val.unmodified_text = decoder.decodeStruct(codec.Uint16);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  KeyData.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(KeyData.encodedSize);
    encoder.writeUint32(7);
    encoder.encodeStruct(codec.Int32, val.key_code);
    encoder.encodeStruct(codec.Uint8, val.is_char);
    encoder.skip(1);
    encoder.encodeStruct(codec.Uint16, val.character);
    encoder.encodeStruct(codec.Int32, val.windows_key_code);
    encoder.encodeStruct(codec.Int32, val.native_key_code);
    encoder.encodeStruct(codec.Uint16, val.text);
    encoder.encodeStruct(codec.Uint16, val.unmodified_text);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function TouchData(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TouchData.prototype.initDefaults_ = function() {
    this.pointer_id = 0;
  };
  TouchData.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TouchData.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, TouchData.encodedSize, 1);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TouchData.encodedSize = codec.kStructHeaderSize + 8;

  TouchData.decode = function(decoder) {
    var packed;
    var val = new TouchData();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.pointer_id = decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  TouchData.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TouchData.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStruct(codec.Int32, val.pointer_id);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function GestureData(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GestureData.prototype.initDefaults_ = function() {
    this.bounding_box = null;
    this.scroll_x = 0;
    this.scroll_y = 0;
    this.velocity_x = 0;
    this.velocity_y = 0;
    this.scale = 0;
    this.swipe_left = false;
    this.swipe_right = false;
    this.swipe_up = false;
    this.swipe_down = false;
    this.tap_count = 0;
  };
  GestureData.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GestureData.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, GestureData.encodedSize, 11);
    if (err !== validator.validationError.NONE)
        return err;
    // validate GestureData.bounding_box
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, geometry$.RectF, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GestureData.encodedSize = codec.kStructHeaderSize + 40;

  GestureData.decode = function(decoder) {
    var packed;
    var val = new GestureData();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.bounding_box = decoder.decodeStructPointer(geometry$.RectF);
    val.scroll_x = decoder.decodeStruct(codec.Float);
    val.scroll_y = decoder.decodeStruct(codec.Float);
    val.velocity_x = decoder.decodeStruct(codec.Float);
    val.velocity_y = decoder.decodeStruct(codec.Float);
    val.scale = decoder.decodeStruct(codec.Float);
    packed = decoder.readUint8();
    val.swipe_left = (packed >> 0) & 1 ? true : false;
    val.swipe_right = (packed >> 1) & 1 ? true : false;
    val.swipe_up = (packed >> 2) & 1 ? true : false;
    val.swipe_down = (packed >> 3) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.tap_count = decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  GestureData.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GestureData.encodedSize);
    encoder.writeUint32(11);
    encoder.encodeStructPointer(geometry$.RectF, val.bounding_box);
    encoder.encodeStruct(codec.Float, val.scroll_x);
    encoder.encodeStruct(codec.Float, val.scroll_y);
    encoder.encodeStruct(codec.Float, val.velocity_x);
    encoder.encodeStruct(codec.Float, val.velocity_y);
    encoder.encodeStruct(codec.Float, val.scale);
    packed = 0;
    packed |= (val.swipe_left & 1) << 0
    packed |= (val.swipe_right & 1) << 1
    packed |= (val.swipe_up & 1) << 2
    packed |= (val.swipe_down & 1) << 3
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int32, val.tap_count);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function MouseWheelData(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MouseWheelData.prototype.initDefaults_ = function() {
    this.x_offset = 0;
    this.y_offset = 0;
  };
  MouseWheelData.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MouseWheelData.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, MouseWheelData.encodedSize, 2);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MouseWheelData.encodedSize = codec.kStructHeaderSize + 8;

  MouseWheelData.decode = function(decoder) {
    var packed;
    var val = new MouseWheelData();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.x_offset = decoder.decodeStruct(codec.Int32);
    val.y_offset = decoder.decodeStruct(codec.Int32);
    return val;
  };

  MouseWheelData.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MouseWheelData.encodedSize);
    encoder.writeUint32(2);
    encoder.encodeStruct(codec.Int32, val.x_offset);
    encoder.encodeStruct(codec.Int32, val.y_offset);
  };

  function Event(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Event.prototype.initDefaults_ = function() {
    this.action = 0;
    this.flags = 0;
    this.time_stamp = 0;
    this.location_data = null;
    this.key_data = null;
    this.touch_data = null;
    this.gesture_data = null;
    this.wheel_data = null;
  };
  Event.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Event.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, Event.encodedSize, 8);
    if (err !== validator.validationError.NONE)
        return err;
    // validate Event.location_data
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, LocationData, true);
    if (err !== validator.validationError.NONE)
        return err;
    // validate Event.key_data
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, KeyData, true);
    if (err !== validator.validationError.NONE)
        return err;
    // validate Event.touch_data
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 32, TouchData, true);
    if (err !== validator.validationError.NONE)
        return err;
    // validate Event.gesture_data
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 40, GestureData, true);
    if (err !== validator.validationError.NONE)
        return err;
    // validate Event.wheel_data
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 48, MouseWheelData, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Event.encodedSize = codec.kStructHeaderSize + 56;

  Event.decode = function(decoder) {
    var packed;
    var val = new Event();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.action = decoder.decodeStruct(codec.Int32);
    val.flags = decoder.decodeStruct(codec.Int32);
    val.time_stamp = decoder.decodeStruct(codec.Int64);
    val.location_data = decoder.decodeStructPointer(LocationData);
    val.key_data = decoder.decodeStructPointer(KeyData);
    val.touch_data = decoder.decodeStructPointer(TouchData);
    val.gesture_data = decoder.decodeStructPointer(GestureData);
    val.wheel_data = decoder.decodeStructPointer(MouseWheelData);
    return val;
  };

  Event.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Event.encodedSize);
    encoder.writeUint32(8);
    encoder.encodeStruct(codec.Int32, val.action);
    encoder.encodeStruct(codec.Int32, val.flags);
    encoder.encodeStruct(codec.Int64, val.time_stamp);
    encoder.encodeStructPointer(LocationData, val.location_data);
    encoder.encodeStructPointer(KeyData, val.key_data);
    encoder.encodeStructPointer(TouchData, val.touch_data);
    encoder.encodeStructPointer(GestureData, val.gesture_data);
    encoder.encodeStructPointer(MouseWheelData, val.wheel_data);
  };


  var exports = {};
  exports.LocationData = LocationData;
  exports.KeyData = KeyData;
  exports.TouchData = TouchData;
  exports.GestureData = GestureData;
  exports.MouseWheelData = MouseWheelData;
  exports.Event = Event;

  module.exports = exports;
</script>

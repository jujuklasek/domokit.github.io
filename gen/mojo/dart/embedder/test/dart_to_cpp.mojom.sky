<!-- Copyright 2014 The Chromium Authors. All rights reserved.
     Use of this source code is governed by a BSD-style license that can be
     found in the LICENSE file. -->

<import src="/gen/mojo/public/sky/bindings.sky" as="bindings" />
<import src="/gen/mojo/public/sky/codec.sky" as="codec" />
<import src="/gen/mojo/public/sky/connection.sky" as="connection" />
<import src="/gen/mojo/public/sky/core.sky" as="core" />
<import src="/gen/mojo/public/sky/validator.sky" as="validator" />
<script>

  function EchoArgs(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  EchoArgs.prototype.initDefaults_ = function() {
    this.si64 = 0;
    this.si32 = 0;
    this.si16 = 0;
    this.si8 = 0;
    this.ui8 = 0;
    this.ui64 = 0;
    this.ui32 = 0;
    this.ui16 = 0;
    this.float_val = 0;
    this.float_inf = 0;
    this.float_nan = 0;
    this.message_handle = null;
    this.double_val = 0;
    this.double_inf = 0;
    this.double_nan = 0;
    this.name = null;
    this.string_array = null;
    this.data_handle = null;
  };
  EchoArgs.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  EchoArgs.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, EchoArgs.encodedSize, 18);
    if (err !== validator.validationError.NONE)
        return err;
    // validate EchoArgs.message_handle
    err = messageValidator.validateHandle(offset + codec.kStructHeaderSize + 44, true)
    if (err !== validator.validationError.NONE)
        return err;
    // validate EchoArgs.name
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 72, true)
    if (err !== validator.validationError.NONE)
        return err;
    // validate EchoArgs.string_array
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 80, 8, codec.String, true, [0, 0], 0);
    if (err !== validator.validationError.NONE)
        return err;
    // validate EchoArgs.data_handle
    err = messageValidator.validateHandle(offset + codec.kStructHeaderSize + 88, true)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  EchoArgs.encodedSize = codec.kStructHeaderSize + 96;

  EchoArgs.decode = function(decoder) {
    var packed;
    var val = new EchoArgs();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.si64 = decoder.decodeStruct(codec.Int64);
    val.si32 = decoder.decodeStruct(codec.Int32);
    val.si16 = decoder.decodeStruct(codec.Int16);
    val.si8 = decoder.decodeStruct(codec.Int8);
    val.ui8 = decoder.decodeStruct(codec.Uint8);
    val.ui64 = decoder.decodeStruct(codec.Uint64);
    val.ui32 = decoder.decodeStruct(codec.Uint32);
    val.ui16 = decoder.decodeStruct(codec.Uint16);
    decoder.skip(1);
    decoder.skip(1);
    val.float_val = decoder.decodeStruct(codec.Float);
    val.float_inf = decoder.decodeStruct(codec.Float);
    val.float_nan = decoder.decodeStruct(codec.Float);
    val.message_handle = decoder.decodeStruct(codec.NullableHandle);
    val.double_val = decoder.decodeStruct(codec.Double);
    val.double_inf = decoder.decodeStruct(codec.Double);
    val.double_nan = decoder.decodeStruct(codec.Double);
    val.name = decoder.decodeStruct(codec.NullableString);
    val.string_array = decoder.decodeArrayPointer(codec.String);
    val.data_handle = decoder.decodeStruct(codec.NullableHandle);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  EchoArgs.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(EchoArgs.encodedSize);
    encoder.writeUint32(18);
    encoder.encodeStruct(codec.Int64, val.si64);
    encoder.encodeStruct(codec.Int32, val.si32);
    encoder.encodeStruct(codec.Int16, val.si16);
    encoder.encodeStruct(codec.Int8, val.si8);
    encoder.encodeStruct(codec.Uint8, val.ui8);
    encoder.encodeStruct(codec.Uint64, val.ui64);
    encoder.encodeStruct(codec.Uint32, val.ui32);
    encoder.encodeStruct(codec.Uint16, val.ui16);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Float, val.float_val);
    encoder.encodeStruct(codec.Float, val.float_inf);
    encoder.encodeStruct(codec.Float, val.float_nan);
    encoder.encodeStruct(codec.NullableHandle, val.message_handle);
    encoder.encodeStruct(codec.Double, val.double_val);
    encoder.encodeStruct(codec.Double, val.double_inf);
    encoder.encodeStruct(codec.Double, val.double_nan);
    encoder.encodeStruct(codec.NullableString, val.name);
    encoder.encodeArrayPointer(codec.String, val.string_array);
    encoder.encodeStruct(codec.NullableHandle, val.data_handle);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function EchoArgsList(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  EchoArgsList.prototype.initDefaults_ = function() {
    this.next = null;
    this.item = null;
  };
  EchoArgsList.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  EchoArgsList.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, EchoArgsList.encodedSize, 2);
    if (err !== validator.validationError.NONE)
        return err;
    // validate EchoArgsList.next
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, EchoArgsList, true);
    if (err !== validator.validationError.NONE)
        return err;
    // validate EchoArgsList.item
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, EchoArgs, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  EchoArgsList.encodedSize = codec.kStructHeaderSize + 16;

  EchoArgsList.decode = function(decoder) {
    var packed;
    var val = new EchoArgsList();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.next = decoder.decodeStructPointer(EchoArgsList);
    val.item = decoder.decodeStructPointer(EchoArgs);
    return val;
  };

  EchoArgsList.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(EchoArgsList.encodedSize);
    encoder.writeUint32(2);
    encoder.encodeStructPointer(EchoArgsList, val.next);
    encoder.encodeStructPointer(EchoArgs, val.item);
  };

  function CppSide_StartTest_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CppSide_StartTest_Params.prototype.initDefaults_ = function() {
  };
  CppSide_StartTest_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CppSide_StartTest_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, CppSide_StartTest_Params.encodedSize, 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CppSide_StartTest_Params.encodedSize = codec.kStructHeaderSize + 0;

  CppSide_StartTest_Params.decode = function(decoder) {
    var packed;
    var val = new CppSide_StartTest_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  CppSide_StartTest_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CppSide_StartTest_Params.encodedSize);
    encoder.writeUint32(0);
  };

  function CppSide_TestFinished_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CppSide_TestFinished_Params.prototype.initDefaults_ = function() {
  };
  CppSide_TestFinished_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CppSide_TestFinished_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, CppSide_TestFinished_Params.encodedSize, 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CppSide_TestFinished_Params.encodedSize = codec.kStructHeaderSize + 0;

  CppSide_TestFinished_Params.decode = function(decoder) {
    var packed;
    var val = new CppSide_TestFinished_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  CppSide_TestFinished_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CppSide_TestFinished_Params.encodedSize);
    encoder.writeUint32(0);
  };

  function CppSide_PingResponse_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CppSide_PingResponse_Params.prototype.initDefaults_ = function() {
  };
  CppSide_PingResponse_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CppSide_PingResponse_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, CppSide_PingResponse_Params.encodedSize, 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CppSide_PingResponse_Params.encodedSize = codec.kStructHeaderSize + 0;

  CppSide_PingResponse_Params.decode = function(decoder) {
    var packed;
    var val = new CppSide_PingResponse_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  CppSide_PingResponse_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CppSide_PingResponse_Params.encodedSize);
    encoder.writeUint32(0);
  };

  function CppSide_EchoResponse_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CppSide_EchoResponse_Params.prototype.initDefaults_ = function() {
    this.list = null;
  };
  CppSide_EchoResponse_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CppSide_EchoResponse_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, CppSide_EchoResponse_Params.encodedSize, 1);
    if (err !== validator.validationError.NONE)
        return err;
    // validate CppSide_EchoResponse_Params.list
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, EchoArgsList, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CppSide_EchoResponse_Params.encodedSize = codec.kStructHeaderSize + 8;

  CppSide_EchoResponse_Params.decode = function(decoder) {
    var packed;
    var val = new CppSide_EchoResponse_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.list = decoder.decodeStructPointer(EchoArgsList);
    return val;
  };

  CppSide_EchoResponse_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CppSide_EchoResponse_Params.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStructPointer(EchoArgsList, val.list);
  };

  function DartSide_SetClient_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DartSide_SetClient_Params.prototype.initDefaults_ = function() {
    this.cppSide = null;
  };
  DartSide_SetClient_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DartSide_SetClient_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, DartSide_SetClient_Params.encodedSize, 1);
    if (err !== validator.validationError.NONE)
        return err;
    // validate DartSide_SetClient_Params.cppSide
    err = messageValidator.validateHandle(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DartSide_SetClient_Params.encodedSize = codec.kStructHeaderSize + 8;

  DartSide_SetClient_Params.decode = function(decoder) {
    var packed;
    var val = new DartSide_SetClient_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.cppSide = decoder.decodeStruct(codec.Handle);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  DartSide_SetClient_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DartSide_SetClient_Params.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStruct(codec.Handle, val.cppSide);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function DartSide_Ping_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DartSide_Ping_Params.prototype.initDefaults_ = function() {
  };
  DartSide_Ping_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DartSide_Ping_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, DartSide_Ping_Params.encodedSize, 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DartSide_Ping_Params.encodedSize = codec.kStructHeaderSize + 0;

  DartSide_Ping_Params.decode = function(decoder) {
    var packed;
    var val = new DartSide_Ping_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  DartSide_Ping_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DartSide_Ping_Params.encodedSize);
    encoder.writeUint32(0);
  };

  function DartSide_Echo_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DartSide_Echo_Params.prototype.initDefaults_ = function() {
    this.numIterations = 0;
    this.arg = null;
  };
  DartSide_Echo_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DartSide_Echo_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, DartSide_Echo_Params.encodedSize, 2);
    if (err !== validator.validationError.NONE)
        return err;
    // validate DartSide_Echo_Params.arg
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, EchoArgs, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DartSide_Echo_Params.encodedSize = codec.kStructHeaderSize + 16;

  DartSide_Echo_Params.decode = function(decoder) {
    var packed;
    var val = new DartSide_Echo_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.numIterations = decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.arg = decoder.decodeStructPointer(EchoArgs);
    return val;
  };

  DartSide_Echo_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DartSide_Echo_Params.encodedSize);
    encoder.writeUint32(2);
    encoder.encodeStruct(codec.Int32, val.numIterations);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(EchoArgs, val.arg);
  };

  var kCppSide_StartTest_Name = 88888888;
  var kCppSide_TestFinished_Name = 99999999;
  var kCppSide_PingResponse_Name = 100000000;
  var kCppSide_EchoResponse_Name = 100000001;

  function CppSideProxy(receiver) {
    bindings.ProxyBase.call(this, receiver);
  }
  CppSideProxy.prototype = Object.create(bindings.ProxyBase.prototype);
  CppSideProxy.prototype.startTest = function() {
    var params = new CppSide_StartTest_Params();
    var builder = new codec.MessageBuilder(
        kCppSide_StartTest_Name,
        codec.align(CppSide_StartTest_Params.encodedSize));
    builder.encodeStruct(CppSide_StartTest_Params, params);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  CppSideProxy.prototype.testFinished = function() {
    var params = new CppSide_TestFinished_Params();
    var builder = new codec.MessageBuilder(
        kCppSide_TestFinished_Name,
        codec.align(CppSide_TestFinished_Params.encodedSize));
    builder.encodeStruct(CppSide_TestFinished_Params, params);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  CppSideProxy.prototype.pingResponse = function() {
    var params = new CppSide_PingResponse_Params();
    var builder = new codec.MessageBuilder(
        kCppSide_PingResponse_Name,
        codec.align(CppSide_PingResponse_Params.encodedSize));
    builder.encodeStruct(CppSide_PingResponse_Params, params);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  CppSideProxy.prototype.echoResponse = function(list) {
    var params = new CppSide_EchoResponse_Params();
    params.list = list;
    var builder = new codec.MessageBuilder(
        kCppSide_EchoResponse_Name,
        codec.align(CppSide_EchoResponse_Params.encodedSize));
    builder.encodeStruct(CppSide_EchoResponse_Params, params);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function CppSideStub(delegate) {
    bindings.StubBase.call(this, delegate);
  }
  CppSideStub.prototype = Object.create(bindings.StubBase.prototype);
  CppSideStub.prototype.startTest = function() {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.startTest && bindings.StubBindings(this).delegate.startTest();
  }
  CppSideStub.prototype.testFinished = function() {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.testFinished && bindings.StubBindings(this).delegate.testFinished();
  }
  CppSideStub.prototype.pingResponse = function() {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.pingResponse && bindings.StubBindings(this).delegate.pingResponse();
  }
  CppSideStub.prototype.echoResponse = function(list) {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.echoResponse && bindings.StubBindings(this).delegate.echoResponse(list);
  }

  CppSideStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kCppSide_StartTest_Name:
      var params = reader.decodeStruct(CppSide_StartTest_Params);
      this.startTest();
      return true;
    case kCppSide_TestFinished_Name:
      var params = reader.decodeStruct(CppSide_TestFinished_Params);
      this.testFinished();
      return true;
    case kCppSide_PingResponse_Name:
      var params = reader.decodeStruct(CppSide_PingResponse_Params);
      this.pingResponse();
      return true;
    case kCppSide_EchoResponse_Name:
      var params = reader.decodeStruct(CppSide_EchoResponse_Params);
      this.echoResponse(params.list);
      return true;
    default:
      return false;
    }
  };

  CppSideStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return Promise.reject(Error("Unhandled message: " + reader.messageName));
    }
  };

  function validateCppSideRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kCppSide_StartTest_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = CppSide_StartTest_Params;
      break;
      case kCppSide_TestFinished_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = CppSide_TestFinished_Params;
      break;
      case kCppSide_PingResponse_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = CppSide_PingResponse_Params;
      break;
      case kCppSide_EchoResponse_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = CppSide_EchoResponse_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateCppSideResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var CppSide = {
    name: 'dart_to_cpp::CppSide',
    proxyClass: CppSideProxy,
    stubClass: CppSideStub,
    validateRequest: validateCppSideRequest,
    validateResponse: null,
  };
  CppSideStub.prototype.validator = validateCppSideRequest;
  CppSideProxy.prototype.validator = null;

  var kDartSide_SetClient_Name = 0;
  var kDartSide_Ping_Name = 1;
  var kDartSide_Echo_Name = 2;

  function DartSideProxy(receiver) {
    bindings.ProxyBase.call(this, receiver);
  }
  DartSideProxy.prototype = Object.create(bindings.ProxyBase.prototype);
  DartSideProxy.prototype.setClient = function(cppSide) {
    var params = new DartSide_SetClient_Params();
    params.cppSide = core.isHandle(cppSide) ? cppSide : connection.bindImpl(cppSide, CppSide);
    var builder = new codec.MessageBuilder(
        kDartSide_SetClient_Name,
        codec.align(DartSide_SetClient_Params.encodedSize));
    builder.encodeStruct(DartSide_SetClient_Params, params);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DartSideProxy.prototype.ping = function() {
    var params = new DartSide_Ping_Params();
    var builder = new codec.MessageBuilder(
        kDartSide_Ping_Name,
        codec.align(DartSide_Ping_Params.encodedSize));
    builder.encodeStruct(DartSide_Ping_Params, params);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DartSideProxy.prototype.echo = function(numIterations, arg) {
    var params = new DartSide_Echo_Params();
    params.numIterations = numIterations;
    params.arg = arg;
    var builder = new codec.MessageBuilder(
        kDartSide_Echo_Name,
        codec.align(DartSide_Echo_Params.encodedSize));
    builder.encodeStruct(DartSide_Echo_Params, params);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function DartSideStub(delegate) {
    bindings.StubBase.call(this, delegate);
  }
  DartSideStub.prototype = Object.create(bindings.StubBase.prototype);
  DartSideStub.prototype.setClient = function(cppSide) {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.setClient && bindings.StubBindings(this).delegate.setClient(connection.bindHandleToProxy(cppSide, CppSide));
  }
  DartSideStub.prototype.ping = function() {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.ping && bindings.StubBindings(this).delegate.ping();
  }
  DartSideStub.prototype.echo = function(numIterations, arg) {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.echo && bindings.StubBindings(this).delegate.echo(numIterations, arg);
  }

  DartSideStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kDartSide_SetClient_Name:
      var params = reader.decodeStruct(DartSide_SetClient_Params);
      this.setClient(params.cppSide);
      return true;
    case kDartSide_Ping_Name:
      var params = reader.decodeStruct(DartSide_Ping_Params);
      this.ping();
      return true;
    case kDartSide_Echo_Name:
      var params = reader.decodeStruct(DartSide_Echo_Params);
      this.echo(params.numIterations, params.arg);
      return true;
    default:
      return false;
    }
  };

  DartSideStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return Promise.reject(Error("Unhandled message: " + reader.messageName));
    }
  };

  function validateDartSideRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kDartSide_SetClient_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DartSide_SetClient_Params;
      break;
      case kDartSide_Ping_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DartSide_Ping_Params;
      break;
      case kDartSide_Echo_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DartSide_Echo_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateDartSideResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var DartSide = {
    name: 'dart_to_cpp::DartSide',
    proxyClass: DartSideProxy,
    stubClass: DartSideStub,
    validateRequest: validateDartSideRequest,
    validateResponse: null,
  };
  DartSideStub.prototype.validator = validateDartSideRequest;
  DartSideProxy.prototype.validator = null;


  var exports = {};
  exports.EchoArgs = EchoArgs;
  exports.EchoArgsList = EchoArgsList;
  exports.CppSide = CppSide;
  exports.DartSide = DartSide;

  module.exports = exports;
</script>

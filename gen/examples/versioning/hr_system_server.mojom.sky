<!-- Copyright 2014 The Chromium Authors. All rights reserved.
     Use of this source code is governed by a BSD-style license that can be
     found in the LICENSE file. -->

<import src="/gen/mojo/public/sky/bindings.sky" as="bindings" />
<import src="/gen/mojo/public/sky/codec.sky" as="codec" />
<import src="/gen/mojo/public/sky/connection.sky" as="connection" />
<import src="/gen/mojo/public/sky/core.sky" as="core" />
<import src="/gen/mojo/public/sky/validator.sky" as="validator" />
<script>
  var Department = {};
  Department.SALES = 0;
  Department.DEV = Department.SALES + 1;

  function Date(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Date.prototype.initDefaults_ = function() {
    this.year = 0;
    this.month = 0;
    this.day = 0;
  };
  Date.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Date.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, Date.encodedSize, 3);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Date.encodedSize = codec.kStructHeaderSize + 8;

  Date.decode = function(decoder) {
    var packed;
    var val = new Date();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.year = decoder.decodeStruct(codec.Uint16);
    val.month = decoder.decodeStruct(codec.Uint8);
    val.day = decoder.decodeStruct(codec.Uint8);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Date.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Date.encodedSize);
    encoder.writeUint32(3);
    encoder.encodeStruct(codec.Uint16, val.year);
    encoder.encodeStruct(codec.Uint8, val.month);
    encoder.encodeStruct(codec.Uint8, val.day);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function Employee(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Employee.prototype.initDefaults_ = function() {
    this.employee_id = 0;
    this.name = null;
    this.department = 0;
    this.birthday = null;
  };
  Employee.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Employee.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, Employee.encodedSize, 1);
    if (err !== validator.validationError.NONE)
        return err;
    // validate Employee.name
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;
    // validate Employee.birthday
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, Date, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Employee.encodedSize = codec.kStructHeaderSize + 32;

  Employee.decode = function(decoder) {
    var packed;
    var val = new Employee();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.employee_id = decoder.decodeStruct(codec.Uint64);
    val.name = decoder.decodeStruct(codec.String);
    val.department = decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.birthday = decoder.decodeStructPointer(Date);
    return val;
  };

  Employee.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Employee.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStruct(codec.Uint64, val.employee_id);
    encoder.encodeStruct(codec.String, val.name);
    encoder.encodeStruct(codec.Int32, val.department);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(Date, val.birthday);
  };

  function HumanResourceDatabase_AddEmployee_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  HumanResourceDatabase_AddEmployee_Params.prototype.initDefaults_ = function() {
    this.employee = null;
  };
  HumanResourceDatabase_AddEmployee_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  HumanResourceDatabase_AddEmployee_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, HumanResourceDatabase_AddEmployee_Params.encodedSize, 1);
    if (err !== validator.validationError.NONE)
        return err;
    // validate HumanResourceDatabase_AddEmployee_Params.employee
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, Employee, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  HumanResourceDatabase_AddEmployee_Params.encodedSize = codec.kStructHeaderSize + 8;

  HumanResourceDatabase_AddEmployee_Params.decode = function(decoder) {
    var packed;
    var val = new HumanResourceDatabase_AddEmployee_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.employee = decoder.decodeStructPointer(Employee);
    return val;
  };

  HumanResourceDatabase_AddEmployee_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(HumanResourceDatabase_AddEmployee_Params.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStructPointer(Employee, val.employee);
  };

  function HumanResourceDatabase_AddEmployee_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  HumanResourceDatabase_AddEmployee_ResponseParams.prototype.initDefaults_ = function() {
    this.success = false;
  };
  HumanResourceDatabase_AddEmployee_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  HumanResourceDatabase_AddEmployee_ResponseParams.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, HumanResourceDatabase_AddEmployee_ResponseParams.encodedSize, 1);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  HumanResourceDatabase_AddEmployee_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  HumanResourceDatabase_AddEmployee_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new HumanResourceDatabase_AddEmployee_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.success = decoder.decodeStruct(codec.Uint8);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  HumanResourceDatabase_AddEmployee_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(HumanResourceDatabase_AddEmployee_ResponseParams.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStruct(codec.Uint8, val.success);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function HumanResourceDatabase_QueryEmployee_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  HumanResourceDatabase_QueryEmployee_Params.prototype.initDefaults_ = function() {
    this.id = 0;
  };
  HumanResourceDatabase_QueryEmployee_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  HumanResourceDatabase_QueryEmployee_Params.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, HumanResourceDatabase_QueryEmployee_Params.encodedSize, 1);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  HumanResourceDatabase_QueryEmployee_Params.encodedSize = codec.kStructHeaderSize + 8;

  HumanResourceDatabase_QueryEmployee_Params.decode = function(decoder) {
    var packed;
    var val = new HumanResourceDatabase_QueryEmployee_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id = decoder.decodeStruct(codec.Uint64);
    return val;
  };

  HumanResourceDatabase_QueryEmployee_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(HumanResourceDatabase_QueryEmployee_Params.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStruct(codec.Uint64, val.id);
  };

  function HumanResourceDatabase_QueryEmployee_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  HumanResourceDatabase_QueryEmployee_ResponseParams.prototype.initDefaults_ = function() {
    this.employee = null;
  };
  HumanResourceDatabase_QueryEmployee_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  HumanResourceDatabase_QueryEmployee_ResponseParams.validate = function(messageValidator, offset) {
    var err;

    err = messageValidator.validateStructHeader(offset, HumanResourceDatabase_QueryEmployee_ResponseParams.encodedSize, 1);
    if (err !== validator.validationError.NONE)
        return err;
    // validate HumanResourceDatabase_QueryEmployee_ResponseParams.employee
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, Employee, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  HumanResourceDatabase_QueryEmployee_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  HumanResourceDatabase_QueryEmployee_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new HumanResourceDatabase_QueryEmployee_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.employee = decoder.decodeStructPointer(Employee);
    return val;
  };

  HumanResourceDatabase_QueryEmployee_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(HumanResourceDatabase_QueryEmployee_ResponseParams.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStructPointer(Employee, val.employee);
  };

  var kHumanResourceDatabase_AddEmployee_Name = 0;
  var kHumanResourceDatabase_QueryEmployee_Name = 1;

  function HumanResourceDatabaseProxy(receiver) {
    bindings.ProxyBase.call(this, receiver);
  }
  HumanResourceDatabaseProxy.prototype = Object.create(bindings.ProxyBase.prototype);
  HumanResourceDatabaseProxy.prototype.addEmployee = function(employee) {
    var params = new HumanResourceDatabase_AddEmployee_Params();
    params.employee = employee;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageWithRequestIDBuilder(
          kHumanResourceDatabase_AddEmployee_Name,
          codec.align(HumanResourceDatabase_AddEmployee_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(HumanResourceDatabase_AddEmployee_Params, params);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(HumanResourceDatabase_AddEmployee_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  HumanResourceDatabaseProxy.prototype.queryEmployee = function(id) {
    var params = new HumanResourceDatabase_QueryEmployee_Params();
    params.id = id;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageWithRequestIDBuilder(
          kHumanResourceDatabase_QueryEmployee_Name,
          codec.align(HumanResourceDatabase_QueryEmployee_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(HumanResourceDatabase_QueryEmployee_Params, params);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(HumanResourceDatabase_QueryEmployee_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function HumanResourceDatabaseStub(delegate) {
    bindings.StubBase.call(this, delegate);
  }
  HumanResourceDatabaseStub.prototype = Object.create(bindings.StubBase.prototype);
  HumanResourceDatabaseStub.prototype.addEmployee = function(employee) {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.addEmployee && bindings.StubBindings(this).delegate.addEmployee(employee);
  }
  HumanResourceDatabaseStub.prototype.queryEmployee = function(id) {
    return bindings.StubBindings(this).delegate && bindings.StubBindings(this).delegate.queryEmployee && bindings.StubBindings(this).delegate.queryEmployee(id);
  }

  HumanResourceDatabaseStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  HumanResourceDatabaseStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kHumanResourceDatabase_AddEmployee_Name:
      var params = reader.decodeStruct(HumanResourceDatabase_AddEmployee_Params);
      return this.addEmployee(params.employee).then(function(response) {
        var responseParams =
            new HumanResourceDatabase_AddEmployee_ResponseParams();
        responseParams.success = response.success;
        var builder = new codec.MessageWithRequestIDBuilder(
            kHumanResourceDatabase_AddEmployee_Name,
            codec.align(HumanResourceDatabase_AddEmployee_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(HumanResourceDatabase_AddEmployee_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
    case kHumanResourceDatabase_QueryEmployee_Name:
      var params = reader.decodeStruct(HumanResourceDatabase_QueryEmployee_Params);
      return this.queryEmployee(params.id).then(function(response) {
        var responseParams =
            new HumanResourceDatabase_QueryEmployee_ResponseParams();
        responseParams.employee = response.employee;
        var builder = new codec.MessageWithRequestIDBuilder(
            kHumanResourceDatabase_QueryEmployee_Name,
            codec.align(HumanResourceDatabase_QueryEmployee_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(HumanResourceDatabase_QueryEmployee_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
    default:
      return Promise.reject(Error("Unhandled message: " + reader.messageName));
    }
  };

  function validateHumanResourceDatabaseRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kHumanResourceDatabase_AddEmployee_Name:
        if (message.expectsResponse())
          paramsClass = HumanResourceDatabase_AddEmployee_Params;
      break;
      case kHumanResourceDatabase_QueryEmployee_Name:
        if (message.expectsResponse())
          paramsClass = HumanResourceDatabase_QueryEmployee_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateHumanResourceDatabaseResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kHumanResourceDatabase_AddEmployee_Name:
        if (message.isResponse())
          paramsClass = HumanResourceDatabase_AddEmployee_ResponseParams;
        break;
      case kHumanResourceDatabase_QueryEmployee_Name:
        if (message.isResponse())
          paramsClass = HumanResourceDatabase_QueryEmployee_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var HumanResourceDatabase = {
    name: 'mojo::examples::HumanResourceDatabase',
    proxyClass: HumanResourceDatabaseProxy,
    stubClass: HumanResourceDatabaseStub,
    validateRequest: validateHumanResourceDatabaseRequest,
    validateResponse: validateHumanResourceDatabaseResponse,
  };
  HumanResourceDatabaseStub.prototype.validator = validateHumanResourceDatabaseRequest;
  HumanResourceDatabaseProxy.prototype.validator = validateHumanResourceDatabaseResponse;


  var exports = {};
  exports.Department = Department;
  exports.Date = Date;
  exports.Employee = Employee;
  exports.HumanResourceDatabase = HumanResourceDatabase;

  module.exports = exports;
</script>
